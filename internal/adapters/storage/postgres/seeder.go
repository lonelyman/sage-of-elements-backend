package postgres

import (
	"log"
	"sage-of-elements-backend/internal/domain"

	"gorm.io/datatypes"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
)

// Seed ‡∏ó‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏ï‡∏¥‡∏°‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Master Data ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
func Seed(db *gorm.DB) error {
	log.Println("Database seeding process started...")
	return db.Transaction(func(tx *gorm.DB) error {
		if err := seedMasteries(tx); err != nil {
			return err
		}
		if err := seedElements(tx); err != nil {
			return err
		}
		if err := seedEffects(tx); err != nil {
			return err
		} // ‚≠êÔ∏è ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡πà‡∏≠‡∏ô Spells ‡πÅ‡∏•‡∏∞ Enemies
		if err := seedRecipes(tx); err != nil {
			return err
		}
		if err := seedSpells(tx); err != nil {
			return err
		} // ‚≠êÔ∏è ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡πà‡∏≠‡∏ô Seeder ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ SpellEffect
		if err := seedGameConfig(tx); err != nil {
			return err
		}
		if err := seedEnemies(tx); err != nil {
			return err
		}
		if err := seedElementalMatchups(tx); err != nil {
			return err
		}
		if err := seedPveContent(tx); err != nil {
			return err
		} // ‚≠êÔ∏è ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤

		log.Println("‚úÖ Database seeding process finished successfully.")
		return nil
	})
}

func seedMasteries(tx *gorm.DB) error {

	log.Println("Seeding/Updating masteries...")
	masteries := []domain.Mastery{
		{ID: 1, Name: "Force", DisplayNames: datatypes.JSONMap{"en": "Force", "th": "‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡πÇ‡∏à‡∏°‡∏ï‡∏µ"}, Descriptions: datatypes.JSONMap{"en": "The art of destruction.", "th": "‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡∏ó‡∏µ‡πà‡∏°‡∏∏‡πà‡∏á‡πÄ‡∏ô‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏•‡∏≤‡∏¢‡∏•‡πâ‡∏≤‡∏á"}},
		{ID: 2, Name: "Resilience", DisplayNames: datatypes.JSONMap{"en": "Resilience", "th": "‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô"}, Descriptions: datatypes.JSONMap{"en": "The art of endurance.", "th": "‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡∏ó‡∏µ‡πà‡∏°‡∏∏‡πà‡∏á‡πÄ‡∏ô‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏î‡∏ó‡∏ô‡πÅ‡∏•‡∏∞‡∏õ‡∏Å‡∏õ‡πâ‡∏≠‡∏á"}},
		{ID: 3, Name: "Efficacy", DisplayNames: datatypes.JSONMap{"en": "Efficacy", "th": "‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡πÄ‡∏™‡∏£‡∏¥‡∏°‡∏û‡∏•‡∏±‡∏á"}, Descriptions: datatypes.JSONMap{"en": "The art of enhancement.", "th": "‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡∏ó‡∏µ‡πà‡∏°‡∏∏‡πà‡∏á‡πÄ‡∏ô‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏£‡∏¥‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ"}},
		{ID: 4, Name: "Command", DisplayNames: datatypes.JSONMap{"en": "Command", "th": "‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô"}, Descriptions: datatypes.JSONMap{"en": "The art of control.", "th": "‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡∏ó‡∏µ‡πà‡∏°‡∏∏‡πà‡∏á‡πÄ‡∏ô‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÅ‡∏•‡∏∞‡∏Å‡πà‡∏≠‡∏Å‡∏ß‡∏ô"}},
	}
	if err := tx.Clauses(clause.OnConflict{UpdateAll: true}).Create(&masteries).Error; err != nil {
		return err
	}
	return nil
}

func seedElements(tx *gorm.DB) error {
	log.Println("Seeding/Updating elements...")
	elements := []domain.Element{
		{ID: 1, Name: "Solidity", DisplayNames: datatypes.JSONMap{"en": "Solidity", "th": "‡∏™‡∏ñ‡∏¥‡∏ï‡∏¢‡∏†‡∏≤‡∏û"}, Tier: 0},
		{ID: 2, Name: "Liquidity", DisplayNames: datatypes.JSONMap{"en": "Liquidity", "th": "‡∏™‡∏†‡∏≤‡∏û‡∏Ñ‡∏•‡πà‡∏≠‡∏á"}, Tier: 0},
		{ID: 3, Name: "Tempo", DisplayNames: datatypes.JSONMap{"en": "Tempo", "th": "‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏∞"}, Tier: 0},
		{ID: 4, Name: "Potency", DisplayNames: datatypes.JSONMap{"en": "Potency", "th": "‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô"}, Tier: 0},
		{ID: 5, Name: "Viscosity", DisplayNames: datatypes.JSONMap{"en": "Viscosity", "th": "‡∏´‡∏ô‡∏∑‡∏î"}, Tier: 1},
		{ID: 6, Name: "Obscurity", DisplayNames: datatypes.JSONMap{"en": "Obscurity", "th": "‡∏Ñ‡∏•‡∏∏‡∏°‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠"}, Tier: 1},
		{ID: 7, Name: "Magma", DisplayNames: datatypes.JSONMap{"en": "Magma", "th": "‡πÅ‡∏°‡πá‡∏Å‡∏°‡πà‡∏≤"}, Tier: 1},
		{ID: 8, Name: "Ionization", DisplayNames: datatypes.JSONMap{"en": "Ionization", "th": "‡πÑ‡∏≠‡∏≠‡∏≠‡∏ô"}, Tier: 1},
		{ID: 9, Name: "Reactivity", DisplayNames: datatypes.JSONMap{"en": "Reactivity", "th": "‡∏Å‡∏£‡∏î"}, Tier: 1},
		{ID: 10, Name: "Volatility", DisplayNames: datatypes.JSONMap{"en": "Volatility", "th": "‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô"}, Tier: 1},
		{ID: 11, Name: "Adamantite", DisplayNames: datatypes.JSONMap{"en": "Adamantite", "th": "‡∏≠‡∏≤‡∏î‡∏≤‡∏°‡∏±‡∏ô‡πÑ‡∏ó‡∏ï‡πå"}, Tier: 1},
		{ID: 12, Name: "Elixir", DisplayNames: datatypes.JSONMap{"en": "Elixir", "th": "‡∏¢‡∏≤‡∏≠‡∏≤‡∏¢‡∏∏‡∏ß‡∏±‡∏í‡∏ô‡∏∞"}, Tier: 1},
		{ID: 13, Name: "Aether", DisplayNames: datatypes.JSONMap{"en": "Aether", "th": "‡∏≠‡∏µ‡πÄ‡∏ò‡∏≠‡∏£‡πå"}, Tier: 1},
		{ID: 14, Name: "Sunfire", DisplayNames: datatypes.JSONMap{"en": "Sunfire", "th": "‡πÅ‡∏Å‡πà‡∏ô‡∏™‡∏∏‡∏£‡∏¥‡∏¢‡∏∞"}, Tier: 1},
		{ID: 15, Name: "Chaos", DisplayNames: datatypes.JSONMap{"en": "Chaos", "th": "‡∏Ñ‡∏ß‡∏≤‡∏°‡πÇ‡∏Å‡∏•‡∏≤‡∏´‡∏•"}, Tier: 1},
	}
	if err := tx.Clauses(clause.OnConflict{UpdateAll: true}).Create(&elements).Error; err != nil {
		return err
	}
	return nil
}

func seedEffects(tx *gorm.DB) error {
	log.Println("Seeding/Updating effects with new 1000-based ID structure...")
	effects := []domain.Effect{
		// === ‡∏´‡∏°‡∏ß‡∏î 1000: Direct Effects (‡∏Å‡∏£‡∏∞‡∏ó‡∏≥‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á) ===
		// --- 1100-1199: HP/MP/Resource Manipulation ---
		{ID: 1101, Name: "DAMAGE", Type: domain.EffectTypeDamage},      // üí• ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢ HP
		{ID: 1102, Name: "SHIELD", Type: domain.EffectTypeShield},      // üõ°Ô∏è ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏•‡πà (‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß)
		{ID: 1103, Name: "HEAL", Type: domain.EffectTypeHeal},          // ‚ù§Ô∏è ‡∏ü‡∏∑‡πâ‡∏ô‡∏ü‡∏π HP
		{ID: 1104, Name: "MP_DAMAGE", Type: domain.EffectTypeResource}, // üíß ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢ MP

		// === ‡∏´‡∏°‡∏ß‡∏î 2000: Buffs (‡πÄ‡∏™‡∏£‡∏¥‡∏°‡∏û‡∏•‡∏±‡∏á - ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡∏ß‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢) ===
		// --- 2100-2199: Regeneration Buffs ---
		{ID: 2101, Name: "BUFF_HP_REGEN", Type: domain.EffectTypeBuff}, // üíñ ‡∏ü‡∏∑‡πâ‡∏ô‡∏ü‡∏π HP ‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á
		{ID: 2102, Name: "BUFF_MP_REGEN", Type: domain.EffectTypeBuff}, // üíô ‡∏ü‡∏∑‡πâ‡∏ô‡∏ü‡∏π MP ‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á
		// --- 2200-2299: Combat Stat Buffs ---
		{ID: 2201, Name: "BUFF_EVASION", Type: domain.EffectTypeBuff},     // üí® ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏´‡∏•‡∏ö‡∏´‡∏•‡∏µ‡∏Å
		{ID: 2202, Name: "BUFF_DMG_UP", Type: domain.EffectTypeBuff},      // üî• ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏ó‡∏≥
		{ID: 2203, Name: "BUFF_RETALIATION", Type: domain.EffectTypeBuff}, // ‚ú® ‡∏™‡∏∞‡∏ó‡πâ‡∏≠‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢
		{ID: 2204, Name: "BUFF_DEFENSE_UP", Type: domain.EffectTypeBuff},  // üí™ ‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢ HP ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö

		// === ‡∏´‡∏°‡∏ß‡∏î 3000: Synergy Buffs (‡πÄ‡∏™‡∏£‡∏¥‡∏°‡∏û‡∏•‡∏±‡∏á - ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏≤‡∏á) ===
		// --- 3100-3199: Stance Buffs ---
		{ID: 3101, Name: "STANCE_S", Type: domain.EffectTypeSynergyBuff}, // üåü ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏™‡∏£‡∏¥‡∏°‡∏û‡∏•‡∏±‡∏á S
		{ID: 3102, Name: "STANCE_L", Type: domain.EffectTypeSynergyBuff}, // üåü ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏™‡∏£‡∏¥‡∏°‡∏û‡∏•‡∏±‡∏á L
		{ID: 3103, Name: "STANCE_G", Type: domain.EffectTypeSynergyBuff}, // üåü ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏™‡∏£‡∏¥‡∏°‡∏û‡∏•‡∏±‡∏á G
		{ID: 3104, Name: "STANCE_P", Type: domain.EffectTypeSynergyBuff}, // üåü ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏™‡∏£‡∏¥‡∏°‡∏û‡∏•‡∏±‡∏á P

		// === ‡∏´‡∏°‡∏ß‡∏î 4000: Debuffs (‡∏•‡∏î‡∏ó‡∏≠‡∏ô - ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡∏ß‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢) ===
		// --- 4100-4199: Stat Debuffs ---
		{ID: 4101, Name: "DEBUFF_SLOW", Type: domain.EffectTypeDebuffCC},     // üê¢ ‡∏•‡∏î‡∏Ñ‡πà‡∏≤ Initiative
		{ID: 4102, Name: "DEBUFF_VULNERABLE", Type: domain.EffectTypeDebuff}, // üéØ ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢‡πÅ‡∏£‡∏á‡∏Ç‡∏∂‡πâ‡∏ô
		// --- 4200-4299: Damage Over Time (DoT) Debuffs ---
		{ID: 4201, Name: "DEBUFF_IGNITE", Type: domain.EffectTypeDebuffDOT}, // üî• ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á (‡πÄ‡∏ú‡∏≤‡πÑ‡∏´‡∏°‡πâ)

		// === ‡∏´‡∏°‡∏ß‡∏î 5000+: Reserved for Future Expansion ===
		// (‡πÄ‡∏ä‡πà‡∏ô 5000=Utility, 6000=Crowd Control, etc.)
	}
	// ‡πÉ‡∏ä‡πâ OnConflict ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏° ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏£‡∏±‡∏ô‡∏ã‡πâ‡∏≥‡πÑ‡∏î‡πâ
	return tx.Clauses(clause.OnConflict{Columns: []clause.Column{{Name: "name"}}, UpdateAll: true}).Create(&effects).Error
}

func seedRecipes(tx *gorm.DB) error {
	// --- 4. ‡πÄ‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏•‡πá‡∏î‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡πå "Recipes" ---
	log.Println("Seeding/Updating recipes...")
	recipes := []domain.Recipe{
		{OutputElementID: 5, BaseMPCost: 25, Ingredients: []*domain.RecipeIngredient{{InputElementID: 1, Quantity: 1}, {InputElementID: 2, Quantity: 1}}},
		{OutputElementID: 6, BaseMPCost: 25, Ingredients: []*domain.RecipeIngredient{{InputElementID: 1, Quantity: 1}, {InputElementID: 3, Quantity: 1}}},
		{OutputElementID: 7, BaseMPCost: 30, Ingredients: []*domain.RecipeIngredient{{InputElementID: 1, Quantity: 1}, {InputElementID: 4, Quantity: 1}}},
		{OutputElementID: 8, BaseMPCost: 30, Ingredients: []*domain.RecipeIngredient{{InputElementID: 2, Quantity: 1}, {InputElementID: 3, Quantity: 1}}},
		{OutputElementID: 9, BaseMPCost: 30, Ingredients: []*domain.RecipeIngredient{{InputElementID: 2, Quantity: 1}, {InputElementID: 4, Quantity: 1}}},
		{OutputElementID: 10, BaseMPCost: 35, Ingredients: []*domain.RecipeIngredient{{InputElementID: 3, Quantity: 1}, {InputElementID: 4, Quantity: 1}}},
		{OutputElementID: 11, BaseMPCost: 40, Ingredients: []*domain.RecipeIngredient{{InputElementID: 1, Quantity: 2}}},
		{OutputElementID: 12, BaseMPCost: 40, Ingredients: []*domain.RecipeIngredient{{InputElementID: 2, Quantity: 2}}},
		{OutputElementID: 13, BaseMPCost: 40, Ingredients: []*domain.RecipeIngredient{{InputElementID: 3, Quantity: 2}}},
		{OutputElementID: 14, BaseMPCost: 50, Ingredients: []*domain.RecipeIngredient{{InputElementID: 4, Quantity: 2}}},
		{OutputElementID: 15, BaseMPCost: 60, Ingredients: []*domain.RecipeIngredient{{InputElementID: 1, Quantity: 1}, {InputElementID: 2, Quantity: 1}, {InputElementID: 3, Quantity: 1}, {InputElementID: 4, Quantity: 1}}},
	}
	tx.Exec("DELETE FROM recipe_ingredients")
	tx.Exec("DELETE FROM recipes")
	if err := tx.Create(&recipes).Error; err != nil {
		return err
	}
	return nil
}

func seedSpells(tx *gorm.DB) error {
	log.Println("Seeding/Updating spells (Updated with new 1000-based Effect IDs)...")
	spells := []domain.Spell{
		// --- S (Solidity) - ‡πÄ‡∏ô‡πâ‡∏ô‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô, Debuff ‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô ---
		{ID: 1, Name: "EarthSlam", TargetType: domain.TargetTypeEnemy, ElementID: 1, MasteryID: 1, APCost: 2, MPCost: 15,
			DisplayNames: datatypes.JSONMap{"en": "Earth Slam", "th": "‡∏õ‡∏ê‡∏û‡∏µ‡∏ó‡∏∏‡∏ö"},
			Descriptions: datatypes.JSONMap{"en": "Deals Solidity damage and grants S Stance.", "th": "‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢‡∏õ‡∏ê‡∏û‡∏µ‡πÅ‡∏•‡∏∞‡∏°‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ S"},
			Effects:      []*domain.SpellEffect{{EffectID: 1101, BaseValue: 55}, {EffectID: 3101, DurationInTurns: 2}}},
		{ID: 2, Name: "StoneSkin", TargetType: domain.TargetTypeSelf, ElementID: 1, MasteryID: 2, APCost: 2, MPCost: 15,
			DisplayNames: datatypes.JSONMap{"en": "Stone Skin", "th": "‡∏ú‡∏¥‡∏ß‡∏®‡∏¥‡∏•‡∏≤"},
			Descriptions: datatypes.JSONMap{"en": "Creates a small shield and grants S Stance.", "th": "‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏•‡πà‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡∏∞‡∏°‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ S"},
			Effects:      []*domain.SpellEffect{{EffectID: 1102, BaseValue: 200}, {EffectID: 3101, DurationInTurns: 2}}},
		{ID: 3, Name: "Reinforce", TargetType: domain.TargetTypeSelf, ElementID: 1, MasteryID: 3, APCost: 2, MPCost: 15,
			DisplayNames: datatypes.JSONMap{"en": "Reinforce", "th": "‡πÄ‡∏™‡∏£‡∏¥‡∏°‡∏Å‡∏≥‡∏•‡∏±‡∏á"},
			Descriptions: datatypes.JSONMap{"en": "Slightly reduces incoming damage for a few turns.", "th": "‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡∏ä‡∏±‡πà‡∏ß‡∏Ç‡∏ì‡∏∞"},
			Effects:      []*domain.SpellEffect{{EffectID: 2204, BaseValue: 15, DurationInTurns: 3}}},
		{ID: 4, Name: "Tremor", TargetType: domain.TargetTypeEnemy, ElementID: 1, MasteryID: 4, APCost: 2, MPCost: 15,
			DisplayNames: datatypes.JSONMap{"en": "Tremor", "th": "‡∏™‡∏∞‡πÄ‡∏ó‡∏∑‡∏≠‡∏ô"},
			Descriptions: datatypes.JSONMap{"en": "Slightly slows the target's initiative.", "th": "‡∏•‡∏î‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡∏£‡∏¥‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Ç‡∏≠‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢"},
			Effects:      []*domain.SpellEffect{{EffectID: 4101, BaseValue: -15, DurationInTurns: 2}}},

		// --- L (Liquidity) - ‡πÄ‡∏ô‡πâ‡∏ô‡∏ü‡∏∑‡πâ‡∏ô‡∏ü‡∏π‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô ---
		{ID: 5, Name: "AquaShot", TargetType: domain.TargetTypeEnemy, ElementID: 2, MasteryID: 1, APCost: 2, MPCost: 15,
			DisplayNames: datatypes.JSONMap{"en": "Aqua Shot", "th": "‡∏Å‡∏£‡∏∞‡∏™‡∏∏‡∏ô‡∏ß‡∏≤‡∏£‡∏µ"},
			Descriptions: datatypes.JSONMap{"en": "Deals Liquidity damage.", "th": "‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢‡∏ß‡∏≤‡∏£‡∏µ"},
			Effects:      []*domain.SpellEffect{{EffectID: 1101, BaseValue: 50}}},
		{ID: 6, Name: "SoothingMist", TargetType: domain.TargetTypeSelf, ElementID: 2, MasteryID: 2, APCost: 2, MPCost: 15,
			DisplayNames: datatypes.JSONMap{"en": "Soothing Mist", "th": "‡∏´‡∏°‡∏≠‡∏Å‡∏ö‡∏£‡∏£‡πÄ‡∏ó‡∏≤"},
			Descriptions: datatypes.JSONMap{"en": "Applies minor HP Regeneration and grants L Stance.", "th": "‡∏°‡∏≠‡∏ö‡∏ú‡∏•‡∏ü‡∏∑‡πâ‡∏ô‡∏ü‡∏π HP ‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏°‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ L"},
			Effects:      []*domain.SpellEffect{{EffectID: 2101, BaseValue: 25, DurationInTurns: 3}, {EffectID: 3102, DurationInTurns: 3}}},
		{ID: 7, Name: "Meditate", TargetType: domain.TargetTypeSelf, ElementID: 2, MasteryID: 3, APCost: 1, MPCost: 0,
			DisplayNames: datatypes.JSONMap{"en": "Meditate", "th": "‡∏ó‡∏≥‡∏™‡∏°‡∏≤‡∏ò‡∏¥"},
			Descriptions: datatypes.JSONMap{"en": "Restores a small amount of MP over time.", "th": "‡∏ü‡∏∑‡πâ‡∏ô‡∏ü‡∏π MP ‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á"},
			Effects:      []*domain.SpellEffect{{EffectID: 2102, BaseValue: 10, DurationInTurns: 3}}},
		{ID: 8, Name: "MinorHeal", TargetType: domain.TargetTypeSelf, ElementID: 2, MasteryID: 2, APCost: 2, MPCost: 15,
			DisplayNames: datatypes.JSONMap{"en": "Minor Heal", "th": "‡∏ü‡∏∑‡πâ‡∏ô‡∏ü‡∏π‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢"},
			Descriptions: datatypes.JSONMap{"en": "Restores a small amount of HP.", "th": "‡∏ü‡∏∑‡πâ‡∏ô‡∏ü‡∏π HP ‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢"},
			Effects:      []*domain.SpellEffect{{EffectID: 1103, BaseValue: 75}}},

		// --- G (Gale) - ‡πÄ‡∏ô‡πâ‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß, ‡∏Å‡πà‡∏≠‡∏Å‡∏ß‡∏ô‡πÄ‡∏ö‡∏≤‡πÜ ---
		{ID: 9, Name: "WindSlash", TargetType: domain.TargetTypeEnemy, ElementID: 3, MasteryID: 1, APCost: 1, MPCost: 10,
			DisplayNames: datatypes.JSONMap{"en": "Wind Slash", "th": "‡∏î‡∏≤‡∏ö‡∏•‡∏°"},
			Descriptions: datatypes.JSONMap{"en": "Deals Gale damage quickly.", "th": "‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢‡∏ß‡∏≤‡∏¢‡∏∏‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß"},
			Effects:      []*domain.SpellEffect{{EffectID: 1101, BaseValue: 35}}},
		{ID: 10, Name: "Blur", TargetType: domain.TargetTypeSelf, ElementID: 3, MasteryID: 2, APCost: 2, MPCost: 15,
			DisplayNames: datatypes.JSONMap{"en": "Blur", "th": "‡∏û‡∏£‡πà‡∏≤‡∏°‡∏±‡∏ß"},
			Descriptions: datatypes.JSONMap{"en": "Slightly increases Evasion for one turn.", "th": "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏´‡∏•‡∏ö‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡∏ä‡∏±‡πà‡∏ß‡∏Ç‡∏ì‡∏∞"},
			Effects:      []*domain.SpellEffect{{EffectID: 2201, BaseValue: 40, DurationInTurns: 1}}},
		{ID: 11, Name: "SwiftStep", TargetType: domain.TargetTypeSelf, ElementID: 3, MasteryID: 3, APCost: 1, MPCost: 10,
			DisplayNames: datatypes.JSONMap{"en": "Swift Step", "th": "‡∏Å‡πâ‡∏≤‡∏ß‡∏ß‡∏≤‡∏¢‡∏∏"},
			Descriptions: datatypes.JSONMap{"en": "Grants G Stance.", "th": "‡∏°‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ G"},
			Effects:      []*domain.SpellEffect{{EffectID: 3103, DurationInTurns: 2}}},
		{ID: 12, Name: "Gust", TargetType: domain.TargetTypeEnemy, ElementID: 3, MasteryID: 4, APCost: 2, MPCost: 15,
			DisplayNames: datatypes.JSONMap{"en": "Gust", "th": "‡∏•‡∏°‡∏Å‡∏£‡∏∞‡πÇ‡∏ä‡∏Å"},
			Descriptions: datatypes.JSONMap{"en": "Moderately slows the target's initiative.", "th": "‡∏•‡∏î‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡∏£‡∏¥‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Ç‡∏≠‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á"},
			Effects:      []*domain.SpellEffect{{EffectID: 4101, BaseValue: -25, DurationInTurns: 2}}},

		// --- P (Plasma) - ‡πÄ‡∏ô‡πâ‡∏ô‡∏î‡∏≤‡πÄ‡∏°‡∏à‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô, ‡∏ö‡∏±‡∏ü/‡∏î‡∏µ‡∏ö‡∏±‡∏ü‡πÄ‡∏ö‡∏≤‡πÜ ---
		{ID: 13, Name: "PlasmaBolt", TargetType: domain.TargetTypeEnemy, ElementID: 4, MasteryID: 1, APCost: 2, MPCost: 15,
			DisplayNames: datatypes.JSONMap{"en": "Plasma Bolt", "th": "‡∏Å‡∏£‡∏∞‡∏™‡∏∏‡∏ô‡∏û‡∏•‡∏≤‡∏™‡∏°‡∏≤"},
			Descriptions: datatypes.JSONMap{"en": "Deals Plasma damage.", "th": "‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢‡∏û‡∏•‡∏≤‡∏™‡∏°‡∏≤"},
			Effects:      []*domain.SpellEffect{{EffectID: 1101, BaseValue: 65}}},
		{ID: 14, Name: "StaticField", TargetType: domain.TargetTypeSelf, ElementID: 4, MasteryID: 2, APCost: 2, MPCost: 15,
			DisplayNames: datatypes.JSONMap{"en": "Static Field", "th": "‡∏™‡∏ô‡∏≤‡∏°‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏™‡∏ñ‡∏¥‡∏ï"},
			Descriptions: datatypes.JSONMap{"en": "Creates a weak shield that slightly damages attackers.", "th": "‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏•‡πà‡πÄ‡∏ö‡∏≤‡∏ö‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏∞‡∏ó‡πâ‡∏≠‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢"},
			Effects:      []*domain.SpellEffect{{EffectID: 1102, BaseValue: 150, DurationInTurns: 2}, {EffectID: 2203, BaseValue: 10, DurationInTurns: 2}}},
		{ID: 15, Name: "Empower", TargetType: domain.TargetTypeSelf, ElementID: 4, MasteryID: 3, APCost: 1, MPCost: 10,
			DisplayNames: datatypes.JSONMap{"en": "Empower", "th": "‡πÄ‡∏™‡∏£‡∏¥‡∏°‡∏û‡∏•‡∏±‡∏á"},
			Descriptions: datatypes.JSONMap{"en": "Slightly increases damage next turn and grants P Stance.", "th": "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡πÉ‡∏ô‡πÄ‡∏ó‡∏¥‡∏£‡πå‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡πÅ‡∏•‡∏∞‡∏°‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ P"},
			Effects:      []*domain.SpellEffect{{EffectID: 2202, BaseValue: 15, DurationInTurns: 1}, {EffectID: 3104, DurationInTurns: 1}}},
		{ID: 16, Name: "Analyze", TargetType: domain.TargetTypeEnemy, ElementID: 4, MasteryID: 4, APCost: 2, MPCost: 15,
			DisplayNames: datatypes.JSONMap{"en": "Analyze", "th": "‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå"},
			Descriptions: datatypes.JSONMap{"en": "Makes the target take slightly increased damage.", "th": "‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢"},
			Effects:      []*domain.SpellEffect{{EffectID: 4102, BaseValue: 10, DurationInTurns: 2}}},

		// --- Tier 1 Spells - ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏ö‡∏≤‡∏•‡∏á ‡πÉ‡∏´‡πâ‡∏û‡∏≠‡πÄ‡∏´‡πá‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πà‡∏≤‡∏á ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡πÇ‡∏Å‡∏á ---
		{ID: 17, Name: "EntanglingRoots", TargetType: domain.TargetTypeEnemy, ElementID: 5, MasteryID: 4, APCost: 2, MPCost: 20,
			DisplayNames: datatypes.JSONMap{"en": "Entangling Roots", "th": "‡∏£‡∏≤‡∏Å‡πÑ‡∏°‡πâ‡∏û‡∏±‡∏ô‡∏ò‡∏ô‡∏≤‡∏Å‡∏≤‡∏£"},
			Descriptions: datatypes.JSONMap{"en": "Greatly slows the target for a short duration.", "th": "‡∏•‡∏î‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡∏£‡∏¥‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏°‡∏≤‡∏Å‡∏ä‡∏±‡πà‡∏ß‡∏Ç‡∏ì‡∏∞"},
			Effects:      []*domain.SpellEffect{{EffectID: 4101, BaseValue: -40, DurationInTurns: 1}}},
		{ID: 18, Name: "ManaBurn", TargetType: domain.TargetTypeEnemy, ElementID: 5, MasteryID: 4, APCost: 2, MPCost: 25,
			DisplayNames: datatypes.JSONMap{"en": "Mana Burn", "th": "‡πÄ‡∏ú‡∏≤‡∏ú‡∏•‡∏≤‡∏ç‡∏°‡∏≤‡∏ô‡∏≤"},
			Descriptions: datatypes.JSONMap{"en": "Damages the target's MP.", "th": "‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢‡πÅ‡∏Å‡πà MP ‡∏Ç‡∏≠‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢"},
			Effects:      []*domain.SpellEffect{{EffectID: 1104, BaseValue: 30}}},
		{ID: 21, Name: "Fireball", TargetType: domain.TargetTypeEnemy, ElementID: 7, MasteryID: 1, APCost: 2, MPCost: 25,
			DisplayNames: datatypes.JSONMap{"en": "Fireball", "th": "‡∏•‡∏π‡∏Å‡πÑ‡∏ü"},
			Descriptions: datatypes.JSONMap{"en": "Deals significant damage and applies a minor Burn.", "th": "‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á‡πÅ‡∏•‡∏∞‡∏ï‡∏¥‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏ú‡∏≤‡πÑ‡∏´‡∏°‡πâ‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢"},
			Effects:      []*domain.SpellEffect{{EffectID: 1101, BaseValue: 70}, {EffectID: 4201, BaseValue: 10, DurationInTurns: 2}}},
	}

	// ‚ö†Ô∏è ‡∏•‡∏ö spell_effects ‡∏Å‡πà‡∏≠‡∏ô spells ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á foreign key constraint
	if err := tx.Exec("DELETE FROM spell_effects").Error; err != nil {
		return err
	}
	if err := tx.Exec("DELETE FROM spells").Error; err != nil {
		return err
	}

	// ‚úÖ Insert spells ‡∏û‡∏£‡πâ‡∏≠‡∏° spell_effects
	return tx.Create(&spells).Error
}

func seedGameConfig(tx *gorm.DB) error {
	log.Println("Seeding/Updating game_configs...")
	configs := []domain.GameConfig{
		// Talent (‡∏Ñ‡πà‡∏≤‡∏û‡∏•‡∏±‡∏á‡∏î‡∏¥‡∏ö)
		{Key: "TALENT_BASE_ALLOCATION", Value: "3"},
		{Key: "TALENT_PRIMARY_ALLOCATION", Value: "90"},

		// Core Stats
		{Key: "STAT_HP_BASE", Value: "100"},
		{Key: "STAT_HP_PER_TALENT_S", Value: "2"},
		{Key: "STAT_MP_BASE", Value: "50"},
		{Key: "STAT_MP_PER_TALENT_L", Value: "1"},
		{Key: "STAT_MP_REGEN_PER_TURN", Value: "5"},
		{Key: "STAT_INITIATIVE_BASE_MIN", Value: "40"},
		{Key: "STAT_INITIATIVE_BASE_MAX", Value: "60"},
		{Key: "STAT_INITIATIVE_PER_TALENT_G", Value: "0.5"},

		// Combat System
		{Key: "MASTERY_ATTACK_MODIFIER", Value: "1.15"},
		{Key: "MASTERY_HEAL_MODIFIER", Value: "1.10"},
		{Key: "MASTERY_DEFENSE_MODIFIER", Value: "1.05"},
		{Key: "MASTERY_SUPPORT_MODIFIER", Value: "1.12"},
		{Key: "ELEMENT_ADVANTAGE_MULTIPLIER", Value: "1.30"},
		{Key: "ELEMENT_DISADVANTAGE_MULTIPLIER", Value: "0.80"},
		{Key: "COMBAT_TURN_TIMEOUT", Value: "60"},
		{Key: "COMBAT_MATCH_TIMEOUT", Value: "1800"},

		// Regeneration
		{Key: "PASSIVE_HP_REGEN_PER_MINUTE", Value: "0"},
		{Key: "PASSIVE_MP_REGEN_PER_MINUTE", Value: "0"},

		// Tutorial
		{Key: "TUTORIAL_TOTAL_STEPS", Value: "4"},

		// Fusion Tutorial
		{Key: "TUTORIAL_FUSION_OUTPUT", Value: "5"},
		{Key: "TUTORIAL_FUSION_AMOUNT", Value: "10"},

		// Experience & Progression
		{Key: "EXP_TRAINING_MATCH", Value: "50"},
		{Key: "EXP_STORY_MATCH", Value: "100"},
		{Key: "EXP_PVP_MATCH", Value: "150"},
	}
	return tx.Clauses(clause.OnConflict{UpdateAll: true}).Create(&configs).Error
}

func seedEnemies(tx *gorm.DB) error {
	log.Println("Seeding/Updating enemies and their AI (Updated with new 1000-based Effect IDs)...")

	// ========================================================================
	// ENEMY 1: TRAINING GOLEM (POTENCY)
	// ========================================================================
	golemP := domain.Enemy{ID: 1, Name: "TRAINING_GOLEM_POTENCY", DisplayNames: datatypes.JSON(`{"en": "Potency Golem", "th": "‡πÇ‡∏Å‡πÄ‡∏•‡∏°‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô"}`), ElementID: 4, Level: 1, MaxHP: 250, Initiative: 40}
	tx.Clauses(clause.OnConflict{UpdateAll: true}).Create(&golemP)
	abilitiesP := []domain.EnemyAbility{
		// ‚≠êÔ∏è ‡∏ó‡πà‡∏≤‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô (Punch) - ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ MP
		{ID: 1, EnemyID: 1, Name: "P_PUNCH", DisplayNames: datatypes.JSON(`{"en": "Punch", "th": "‡∏´‡∏°‡∏±‡∏î‡∏ï‡∏£‡∏á"}`), APCost: 1, MPCost: 0, EffectsJSON: datatypes.JSON(`[{"effect_id": 1101, "value": 20}]`)},
		// ‚≠êÔ∏è ‡∏ó‡πà‡∏≤‡πÑ‡∏°‡πâ‡∏ï‡∏≤‡∏¢ (Tremor) - ‡πÉ‡∏ä‡πâ MP 10
		{ID: 2, EnemyID: 1, Name: "P_TREMOR", DisplayNames: datatypes.JSON(`{"en": "Tremor", "th": "‡∏Ñ‡∏•‡∏∑‡πà‡∏ô‡∏û‡∏•‡∏±‡∏á"}`), APCost: 3, MPCost: 10, EffectsJSON: datatypes.JSON(`[{"effect_id": 1101, "value": 40}, {"effect_id": 4101, "value": -10, "duration": 2}]`)},
		// ‚≠êÔ∏è ‡∏ó‡πà‡∏≤‡∏ö‡∏±‡∏ü (Overcharge) - ‡πÉ‡∏ä‡πâ MP 5
		{ID: 9, EnemyID: 1, Name: "P_OVERCHARGE", DisplayNames: datatypes.JSON(`{"en": "Overcharge", "th": "‡∏õ‡∏•‡∏∏‡∏Å‡∏û‡∏•‡∏±‡∏á"}`), APCost: 2, MPCost: 5, EffectsJSON: datatypes.JSON(`[{"effect_id": 2202, "target": "SELF", "value": 30, "duration": 2}]`)},
	}
	tx.Clauses(clause.OnConflict{UpdateAll: true}).Create(&abilitiesP)
	tx.Where("enemy_id = ?", 1).Delete(&domain.EnemyAI{})
	aiRulesP := []domain.EnemyAI{
		{EnemyID: 1, Priority: 1, Condition: domain.AIConditionTurnIs, ConditionValue: 2, Action: domain.AIActionUseAbility, Target: "PLAYER", AbilityToUseID: &abilitiesP[1].ID},       // ‡∏ó‡πà‡∏≤‡πÑ‡∏°‡πâ‡∏ï‡∏≤‡∏¢ (Tremor)
		{EnemyID: 1, Priority: 10, Condition: domain.AIConditionSelfHPBelow, ConditionValue: 0.6, Action: domain.AIActionUseAbility, Target: "SELF", AbilityToUseID: &abilitiesP[2].ID}, // ‡∏ó‡πà‡∏≤‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ò‡∏≤‡∏ï‡∏∏ (Overcharge)
		{EnemyID: 1, Priority: 99, Condition: domain.AIConditionAlways, Action: domain.AIActionUseAbility, Target: "PLAYER", AbilityToUseID: &abilitiesP[0].ID},                         // ‡∏ó‡πà‡∏≤‡∏î‡∏≤‡πÄ‡∏°‡∏à (Punch)
	}
	tx.Create(&aiRulesP)

	// ========================================================================
	// ENEMY 2: TRAINING GOLEM (SOLIDITY)
	// ========================================================================
	golemS := domain.Enemy{ID: 2, Name: "TRAINING_GOLEM_SOLIDITY", DisplayNames: datatypes.JSON(`{"en": "Solidity Golem", "th": "‡πÇ‡∏Å‡πÄ‡∏•‡∏°‡∏®‡∏¥‡∏•‡∏≤"}`), ElementID: 1, Level: 1, MaxHP: 300, Initiative: 35}
	tx.Clauses(clause.OnConflict{UpdateAll: true}).Create(&golemS)
	abilitiesS := []domain.EnemyAbility{
		// ‚≠êÔ∏è ‡∏ó‡πà‡∏≤‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô (Slap) - ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ MP
		{ID: 3, EnemyID: 2, Name: "S_SLAP", DisplayNames: datatypes.JSON(`{"en": "Slap", "th": "‡∏ï‡∏ö"}`), APCost: 1, MPCost: 0, EffectsJSON: datatypes.JSON(`[{"effect_id": 1101, "value": 15}]`)},
		// ‚≠êÔ∏è ‡∏ó‡πà‡∏≤‡∏ö‡∏±‡∏ü (Harden) - ‡πÉ‡∏ä‡πâ MP 5
		{ID: 4, EnemyID: 2, Name: "S_HARDEN", DisplayNames: datatypes.JSON(`{"en": "Harden", "th": "‡∏Å‡∏≤‡∏¢‡∏≤‡∏´‡∏¥‡∏ô"}`), APCost: 2, MPCost: 5, EffectsJSON: datatypes.JSON(`[{"effect_id": 2204, "target": "SELF", "duration": 2}]`)},
		// ‚≠êÔ∏è ‡∏ó‡πà‡∏≤‡πÑ‡∏°‡πâ‡∏ï‡∏≤‡∏¢ (Quake) - ‡πÉ‡∏ä‡πâ MP 10
		{ID: 10, EnemyID: 2, Name: "S_QUAKE", DisplayNames: datatypes.JSON(`{"en": "Quake", "th": "‡∏î‡∏¥‡∏ô‡πÑ‡∏´‡∏ß"}`), APCost: 2, MPCost: 10, EffectsJSON: datatypes.JSON(`[{"effect_id": 1101, "value": 30}]`)},
	}
	tx.Clauses(clause.OnConflict{UpdateAll: true}).Create(&abilitiesS)
	tx.Where("enemy_id = ?", 2).Delete(&domain.EnemyAI{})
	aiRulesS := []domain.EnemyAI{
		{EnemyID: 2, Priority: 1, Condition: domain.AIConditionTurnIs, ConditionValue: 3, Action: domain.AIActionUseAbility, Target: "PLAYER", AbilityToUseID: &abilitiesS[2].ID},       // ‡∏ó‡πà‡∏≤‡πÑ‡∏°‡πâ‡∏ï‡∏≤‡∏¢ (Quake)
		{EnemyID: 2, Priority: 10, Condition: domain.AIConditionSelfHPBelow, ConditionValue: 0.5, Action: domain.AIActionUseAbility, Target: "SELF", AbilityToUseID: &abilitiesS[1].ID}, // ‡∏ó‡πà‡∏≤‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ò‡∏≤‡∏ï‡∏∏ (Harden)
		{EnemyID: 2, Priority: 99, Condition: domain.AIConditionAlways, Action: domain.AIActionUseAbility, Target: "PLAYER", AbilityToUseID: &abilitiesS[0].ID},                         // ‡∏ó‡πà‡∏≤‡∏î‡∏≤‡πÄ‡∏°‡∏à (Slap)
	}
	tx.Create(&aiRulesS)

	// ========================================================================
	// ENEMY 3: TRAINING GOLEM (LIQUIDITY)
	// ========================================================================
	golemL := domain.Enemy{ID: 3, Name: "TRAINING_GOLEM_LIQUIDITY", DisplayNames: datatypes.JSON(`{"en": "Liquidity Golem", "th": "‡πÇ‡∏Å‡πÄ‡∏•‡∏°‡∏ß‡∏≤‡∏£‡∏µ"}`), ElementID: 2, Level: 1, MaxHP: 220, Initiative: 45}
	tx.Clauses(clause.OnConflict{UpdateAll: true}).Create(&golemL)
	abilitiesL := []domain.EnemyAbility{
		// ‚≠êÔ∏è ‡∏ó‡πà‡∏≤‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô (Splash) - ‡πÉ‡∏ä‡πâ MP 5 (‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏°‡∏±‡∏ô 2 AP)
		{ID: 5, EnemyID: 3, Name: "L_SPLASH", DisplayNames: datatypes.JSON(`{"en": "Splash", "th": "‡∏™‡∏≤‡∏î‡∏ô‡πâ‡∏≥"}`), APCost: 2, MPCost: 5, EffectsJSON: datatypes.JSON(`[{"effect_id": 1101, "value": 25}]`)},
		// ‚≠êÔ∏è ‡∏ó‡πà‡∏≤‡∏ö‡∏±‡∏ü (Regen) - ‡πÉ‡∏ä‡πâ MP 10
		{ID: 6, EnemyID: 3, Name: "L_REGEN", DisplayNames: datatypes.JSON(`{"en": "Regenerate", "th": "‡∏ü‡∏∑‡πâ‡∏ô‡∏ü‡∏π"}`), APCost: 2, MPCost: 10, EffectsJSON: datatypes.JSON(`[{"effect_id": 2101, "target": "SELF", "value": 20, "duration": 3}]`)},
		// ‚≠êÔ∏è ‡∏ó‡πà‡∏≤‡πÑ‡∏°‡πâ‡∏ï‡∏≤‡∏¢ (Drown) - ‡πÉ‡∏ä‡πâ MP 15
		{ID: 11, EnemyID: 3, Name: "L_DROWN", DisplayNames: datatypes.JSON(`{"en": "Drown", "th": "‡∏Å‡∏£‡∏∞‡πÅ‡∏™‡∏ô‡πâ‡∏≥"}`), APCost: 3, MPCost: 15, EffectsJSON: datatypes.JSON(`[{"effect_id": 4102, "target": "PLAYER", "value": 20, "duration": 2}]`)},
	}
	tx.Clauses(clause.OnConflict{UpdateAll: true}).Create(&abilitiesL)
	tx.Where("enemy_id = ?", 3).Delete(&domain.EnemyAI{})
	aiRulesL := []domain.EnemyAI{
		{EnemyID: 3, Priority: 1, Condition: domain.AIConditionTurnIs, ConditionValue: 2, Action: domain.AIActionUseAbility, Target: "PLAYER", AbilityToUseID: &abilitiesL[2].ID},       // ‡∏ó‡πà‡∏≤‡πÑ‡∏°‡πâ‡∏ï‡∏≤‡∏¢ (Drown)
		{EnemyID: 3, Priority: 10, Condition: domain.AIConditionSelfHPBelow, ConditionValue: 0.5, Action: domain.AIActionUseAbility, Target: "SELF", AbilityToUseID: &abilitiesL[1].ID}, // ‡∏ó‡πà‡∏≤‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ò‡∏≤‡∏ï‡∏∏ (Regen)
		{EnemyID: 3, Priority: 99, Condition: domain.AIConditionAlways, Action: domain.AIActionUseAbility, Target: "PLAYER", AbilityToUseID: &abilitiesL[0].ID},                         // ‡∏ó‡πà‡∏≤‡∏î‡∏≤‡πÄ‡∏°‡∏à (Splash)
	}
	tx.Create(&aiRulesL)

	// ========================================================================
	// ENEMY 4: TRAINING GOLEM (TEMPO)
	// ========================================================================
	golemG := domain.Enemy{ID: 4, Name: "TRAINING_GOLEM_TEMPO", DisplayNames: datatypes.JSON(`{"en": "Tempo Golem", "th": "‡πÇ‡∏Å‡πÄ‡∏•‡∏°‡∏ß‡∏≤‡∏¢‡∏∏"}`), ElementID: 3, Level: 1, MaxHP: 200, Initiative: 55}
	tx.Clauses(clause.OnConflict{UpdateAll: true}).Create(&golemG)
	abilitiesG := []domain.EnemyAbility{
		// ‚≠êÔ∏è ‡∏ó‡πà‡∏≤‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô (Wind Slash) - ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ MP (‡πÄ‡∏û‡∏£‡∏≤‡∏∞ 1 AP)
		{ID: 7, EnemyID: 4, Name: "G_WIND_SLASH", DisplayNames: datatypes.JSON(`{"en": "Wind Slash", "th": "‡∏Ñ‡∏°‡∏•‡∏°"}`), APCost: 1, MPCost: 0, EffectsJSON: datatypes.JSON(`[{"effect_id": 1101, "value": 25}]`)},
		// ‚≠êÔ∏è ‡∏ó‡πà‡∏≤‡∏ö‡∏±‡∏ü (Evade) - ‡πÉ‡∏ä‡πâ MP 5
		{ID: 8, EnemyID: 4, Name: "G_EVADE", DisplayNames: datatypes.JSON(`{"en": "Evade", "th": "‡∏´‡∏•‡∏ö‡∏´‡∏•‡∏µ‡∏Å"}`), APCost: 2, MPCost: 5, EffectsJSON: datatypes.JSON(`[{"effect_id": 2201, "target": "SELF", "value": 50, "duration": 1}]`)},
		// ‚≠êÔ∏è ‡∏ó‡πà‡∏≤‡πÑ‡∏°‡πâ‡∏ï‡∏≤‡∏¢ (Tornado) - ‡πÉ‡∏ä‡πâ MP 15
		{ID: 12, EnemyID: 4, Name: "G_TORNADO", DisplayNames: datatypes.JSON(`{"en": "Tornado", "th": "‡∏û‡∏≤‡∏¢‡∏∏‡∏´‡∏°‡∏∏‡∏ô"}`), APCost: 3, MPCost: 15, EffectsJSON: datatypes.JSON(`[{"effect_id": 1101, "value": 50}]`)},
	}
	tx.Clauses(clause.OnConflict{UpdateAll: true}).Create(&abilitiesG)
	tx.Where("enemy_id = ?", 4).Delete(&domain.EnemyAI{})
	aiRulesG := []domain.EnemyAI{
		{EnemyID: 4, Priority: 1, Condition: domain.AIConditionTurnIs, ConditionValue: 3, Action: domain.AIActionUseAbility, Target: "PLAYER", AbilityToUseID: &abilitiesG[2].ID}, // ‡∏ó‡πà‡∏≤‡πÑ‡∏°‡πâ‡∏ï‡∏≤‡∏¢ (Tornado)
		{EnemyID: 4, Priority: 10, Condition: domain.AIConditionTurnIs, ConditionValue: 2, Action: domain.AIActionUseAbility, Target: "SELF", AbilityToUseID: &abilitiesG[1].ID},  // ‡∏ó‡πà‡∏≤‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ò‡∏≤‡∏ï‡∏∏ (Evade)
		{EnemyID: 4, Priority: 99, Condition: domain.AIConditionAlways, Action: domain.AIActionUseAbility, Target: "PLAYER", AbilityToUseID: &abilitiesG[0].ID},                   // ‡∏ó‡πà‡∏≤‡∏î‡∏≤‡πÄ‡∏°‡∏à (Wind Slash)
	}
	tx.Create(&aiRulesG)

	return nil
}

func seedElementalMatchups(tx *gorm.DB) error {
	log.Println("Seeding/Updating elemental matchups...")

	matchups := []domain.ElementalMatchup{
		// --- S (ID:1) Attacking ---
		{AttackingElementID: 1, DefendingElementID: 1, Modifier: 1.0}, // S vs S
		{AttackingElementID: 1, DefendingElementID: 2, Modifier: 0.8}, // S vs L (‡πÅ‡∏û‡πâ‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢)
		{AttackingElementID: 1, DefendingElementID: 3, Modifier: 1.0}, // S vs G
		{AttackingElementID: 1, DefendingElementID: 4, Modifier: 1.5}, // S vs P (‡∏ä‡∏ô‡∏∞‡∏ó‡∏≤‡∏á‡∏Ç‡∏≤‡∏î‡∏•‡∏≠‡∏¢!)

		// --- L (ID:2) Attacking ---
		{AttackingElementID: 2, DefendingElementID: 1, Modifier: 1.3}, // L vs S (‡∏ä‡∏ô‡∏∞‡∏ó‡∏≤‡∏á)
		{AttackingElementID: 2, DefendingElementID: 2, Modifier: 1.0}, // L vs L
		{AttackingElementID: 2, DefendingElementID: 3, Modifier: 0.7}, // L vs G (‡πÅ‡∏û‡πâ‡∏ó‡∏≤‡∏á‡∏´‡∏ô‡∏±‡∏Å)
		{AttackingElementID: 2, DefendingElementID: 4, Modifier: 1.0}, // L vs P

		// --- G (ID:3) Attacking ---
		{AttackingElementID: 3, DefendingElementID: 1, Modifier: 1.0}, // G vs S
		{AttackingElementID: 3, DefendingElementID: 2, Modifier: 1.2}, // G vs L (‡∏ä‡∏ô‡∏∞‡∏ó‡∏≤‡∏á‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏∏‡∏°‡πÄ‡∏Å‡∏°)
		{AttackingElementID: 3, DefendingElementID: 3, Modifier: 1.0}, // G vs G
		{AttackingElementID: 3, DefendingElementID: 4, Modifier: 0.8}, // G vs P (‡πÅ‡∏û‡πâ‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢)

		// --- P (ID:4) Attacking ---
		{AttackingElementID: 4, DefendingElementID: 1, Modifier: 0.7}, // P vs S (‡πÅ‡∏û‡πâ‡∏ó‡∏≤‡∏á‡∏´‡∏ô‡∏±‡∏Å)
		{AttackingElementID: 4, DefendingElementID: 2, Modifier: 1.0}, // P vs L
		{AttackingElementID: 4, DefendingElementID: 3, Modifier: 1.4}, // P vs G (‡∏ä‡∏ô‡∏∞‡∏ó‡∏≤‡∏á‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á)
		{AttackingElementID: 4, DefendingElementID: 4, Modifier: 1.0}, // P vs P
	}

	return tx.Clauses(clause.OnConflict{
		Columns:   []clause.Column{{Name: "attacking_element_id"}, {Name: "defending_element_id"}},
		DoUpdates: clause.AssignmentColumns([]string{"modifier"}),
	}).Create(&matchups).Error
}

func seedPveContent(tx *gorm.DB) error {
	log.Println("Seeding/Updating PvE content...")
	mainStoryRealm := domain.Realm{ID: 1, Name: "MAIN_STORY", DisplayNames: datatypes.JSON(`{"en": "Main Story", "th": "‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏Å"}`)}
	tx.Clauses(clause.OnConflict{UpdateAll: true}).Create(&mainStoryRealm)
	chapter1 := domain.Chapter{ID: 1, RealmID: 1, ChapterNumber: 1, Name: "THE_AWAKENING", DisplayNames: datatypes.JSON(`{"en": "The Awakening", "th": "‡∏Å‡∏≤‡∏£‡∏ï‡∏∑‡πà‡∏ô‡∏£‡∏π‡πâ"}`)}
	tx.Clauses(clause.OnConflict{UpdateAll: true}).Create(&chapter1)
	stages := []domain.Stage{
		{ID: 1, ChapterID: 1, StageNumber: 1, Name: "FORGOTTEN_PATH", DisplayNames: datatypes.JSON(`{"en": "A Forgotten Path", "th": "‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏•‡∏∑‡∏°"}`), StageType: domain.StageTypeStory},
	}
	return tx.Clauses(clause.OnConflict{UpdateAll: true}).Create(&stages).Error
}
