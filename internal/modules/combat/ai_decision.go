// file: internal/modules/combat/ai_decision.go
package combat

import (
	"sage-of-elements-backend/internal/domain"
)

// ==================== AI Decision Making ====================
// ‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏Ç‡∏≠‡∏á AI
// - ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç (condition checking)
// - ‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å action (action selection)
// - ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏£‡∏±‡∏û‡∏¢‡∏≤‡∏Å‡∏£ (resource validation)

// AIDecisionContext ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà AI ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à
type AIDecisionContext struct {
	AICombatant    *domain.Combatant
	PlayerTarget   *domain.Combatant
	Match          *domain.CombatMatch
	AvailableRules []*domain.EnemyAI
}

// AISelectedAction ‡πÄ‡∏Å‡πá‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à
type AISelectedAction struct {
	Ability *domain.EnemyAbility
	Target  *domain.Combatant
	Rule    *domain.EnemyAI
}

// SelectNextAction ‡πÄ‡∏õ‡πá‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å action ‡∏ó‡∏µ‡πà AI ‡∏à‡∏∞‡∏ó‡∏≥
// ‡∏à‡∏∞‡∏ß‡∏ô loop ‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö priority ‡∏Ç‡∏≠‡∏á rules ‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏à‡∏≠ action ‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡πÑ‡∏î‡πâ
func (s *combatService) SelectNextAction(ctx *AIDecisionContext) *AISelectedAction {
	s.appLogger.Debug("ü§ñ AI starting action selection",
		"ai_id", ctx.AICombatant.ID,
		"current_ap", ctx.AICombatant.CurrentAP,
		"current_mp", ctx.AICombatant.CurrentMP,
		"rules_count", len(ctx.AvailableRules),
	)

	// ‡∏ß‡∏ô loop ‡∏ï‡∏≤‡∏° priority (rules ‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡πÑ‡∏õ‡∏°‡∏≤‡∏Å‡πÅ‡∏•‡πâ‡∏ß)
	for _, rule := range ctx.AvailableRules {
		// 1. ‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç
		if !s._EvaluateCondition(ctx, rule) {
			s.appLogger.Debug("AI rule condition not met, skipping",
				"priority", rule.Priority,
				"condition", rule.Condition,
			)
			continue
		}

		// 2. ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏°‡∏µ ability ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
		if rule.AbilityToUse == nil {
			s.appLogger.Warn("AI rule has no ability, skipping",
				"priority", rule.Priority,
			)
			continue
		}

		// 3. ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ó‡∏£‡∏±‡∏û‡∏¢‡∏≤‡∏Å‡∏£ (AP, MP)
		if !s._CanAffordAbility(ctx.AICombatant, rule.AbilityToUse) {
			s.appLogger.Debug("AI cannot afford ability, checking next rule",
				"priority", rule.Priority,
				"ability", rule.AbilityToUse.Name,
				"need_ap", rule.AbilityToUse.APCost,
				"need_mp", rule.AbilityToUse.MPCost,
				"have_ap", ctx.AICombatant.CurrentAP,
				"have_mp", ctx.AICombatant.CurrentMP,
			)
			continue
		}

		// 4. ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢
		target := s._DetermineTarget(ctx, rule)
		if target == nil {
			s.appLogger.Warn("AI could not determine target, skipping",
				"priority", rule.Priority,
			)
			continue
		}

		// 5. ‡πÄ‡∏à‡∏≠ action ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß!
		s.appLogger.Info("‚úÖ AI selected action",
			"ability", rule.AbilityToUse.Name,
			"priority", rule.Priority,
			"target", target.ID,
			"ap_cost", rule.AbilityToUse.APCost,
			"mp_cost", rule.AbilityToUse.MPCost,
		)

		return &AISelectedAction{
			Ability: rule.AbilityToUse,
			Target:  target,
			Rule:    rule,
		}
	}

	// ‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ action ‡πÑ‡∏´‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢
	s.appLogger.Info("‚ùå AI found no valid action",
		"ai_id", ctx.AICombatant.ID,
		"ap_remaining", ctx.AICombatant.CurrentAP,
	)
	return nil
}

// ==================== Condition Evaluation ====================

// _EvaluateCondition ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Ç‡∏≠‡∏á rule ‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
func (s *combatService) _EvaluateCondition(ctx *AIDecisionContext, rule *domain.EnemyAI) bool {
	switch rule.Condition {
	case domain.AIConditionAlways:
		return s._CheckAlways()

	case domain.AIConditionTurnIs:
		return s._CheckTurnIs(ctx.Match, rule.ConditionValue)

	case domain.AIConditionSelfHPBelow:
		return s._CheckSelfHPBelow(ctx.AICombatant, rule.ConditionValue)

	default:
		s.appLogger.Warn("Unknown AI condition type",
			"condition", rule.Condition,
		)
		return false
	}
}

// _CheckAlways - ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏£‡∏¥‡∏á‡πÄ‡∏™‡∏°‡∏≠
func (s *combatService) _CheckAlways() bool {
	return true
}

// _CheckTurnIs - ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ó‡∏¥‡∏£‡πå‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
func (s *combatService) _CheckTurnIs(match *domain.CombatMatch, targetTurn float64) bool {
	return float64(match.TurnNumber) == targetTurn
}

// _CheckSelfHPBelow - ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤ HP ‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
func (s *combatService) _CheckSelfHPBelow(combatant *domain.Combatant, threshold float64) bool {
	if combatant.Enemy == nil || combatant.Enemy.MaxHP == 0 {
		return false
	}

	currentHPRatio := float64(combatant.CurrentHP) / float64(combatant.Enemy.MaxHP)
	return currentHPRatio <= threshold
}

// ==================== Resource Validation ====================

// _CanAffordAbility ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤ AI ‡∏°‡∏µ‡∏ó‡∏£‡∏±‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏û‡∏≠‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ ability ‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
func (s *combatService) _CanAffordAbility(combatant *domain.Combatant, ability *domain.EnemyAbility) bool {
	hasEnoughAP := combatant.CurrentAP >= ability.APCost
	hasEnoughMP := combatant.CurrentMP >= ability.MPCost

	return hasEnoughAP && hasEnoughMP
}

// ==================== Target Selection ====================

// _DetermineTarget ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á action ‡∏ï‡∏≤‡∏° rule
func (s *combatService) _DetermineTarget(ctx *AIDecisionContext, rule *domain.EnemyAI) *domain.Combatant {
	switch rule.Target {
	case domain.AITargetPlayer:
		return ctx.PlayerTarget

	case domain.AITargetSelf:
		return ctx.AICombatant

	default:
		// Default ‡πÉ‡∏´‡πâ target ‡πÄ‡∏õ‡πá‡∏ô player
		s.appLogger.Debug("Unknown AI target type, defaulting to player",
			"target_type", rule.Target,
		)
		return ctx.PlayerTarget
	}
}
