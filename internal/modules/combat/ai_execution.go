// file: internal/modules/combat/ai_execution.go
package combat

import (
	"encoding/json"
	"sage-of-elements-backend/internal/domain"
)

// ==================== AI Action Execution ====================
// ‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£ execute action ‡∏Ç‡∏≠‡∏á AI
// - ‡∏Å‡∏≤‡∏£‡∏´‡∏±‡∏Å‡∏ó‡∏£‡∏±‡∏û‡∏¢‡∏≤‡∏Å‡∏£ (resource deduction)
// - ‡∏Å‡∏≤‡∏£ apply effects
// - ‡∏Å‡∏≤‡∏£ log action results

// ExecuteAIAction ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ execute action ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß
// ‡∏à‡∏∞‡∏´‡∏±‡∏Å‡∏ó‡∏£‡∏±‡∏û‡∏¢‡∏≤‡∏Å‡∏£, apply effects, ‡πÅ‡∏•‡∏∞ log ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
func (s *combatService) ExecuteAIAction(
	aiCombatant *domain.Combatant,
	action *AISelectedAction,
) error {
	s.appLogger.Info("üéØ AI executing action",
		"ai_id", aiCombatant.ID,
		"ability", action.Ability.Name,
		"target", action.Target.ID,
	)

	// 1. ‡∏´‡∏±‡∏Å‡∏ó‡∏£‡∏±‡∏û‡∏¢‡∏≤‡∏Å‡∏£ (AP, MP)
	s._DeductResources(aiCombatant, action.Ability)

	// 2. Apply effects ‡∏Ç‡∏≠‡∏á ability
	err := s._ApplyAbilityEffects(aiCombatant, action)
	if err != nil {
		s.appLogger.Error("Failed to apply AI ability effects", err,
			"ai_id", aiCombatant.ID,
			"ability", action.Ability.Name,
		)
		return err
	}

	// 3. Log ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏´‡∏•‡∏±‡∏á execute
	s.appLogger.Info("‚úÖ AI action executed successfully",
		"ai_id", aiCombatant.ID,
		"ability", action.Ability.Name,
		"ap_remaining", aiCombatant.CurrentAP,
		"mp_remaining", aiCombatant.CurrentMP,
	)

	return nil
}

// ==================== Resource Management ====================

// _DeductResources ‡∏´‡∏±‡∏Å‡∏ó‡∏£‡∏±‡∏û‡∏¢‡∏≤‡∏Å‡∏£ (AP, MP) ‡∏à‡∏≤‡∏Å AI combatant
func (s *combatService) _DeductResources(
	aiCombatant *domain.Combatant,
	ability *domain.EnemyAbility,
) {
	// ‡∏´‡∏±‡∏Å AP
	aiCombatant.CurrentAP -= ability.APCost
	if aiCombatant.CurrentAP < 0 {
		aiCombatant.CurrentAP = 0
	}

	// ‡∏´‡∏±‡∏Å MP (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
	if ability.MPCost > 0 {
		aiCombatant.CurrentMP -= ability.MPCost
		if aiCombatant.CurrentMP < 0 {
			aiCombatant.CurrentMP = 0
		}
	}

	s.appLogger.Debug("AI resources deducted",
		"ap_cost", ability.APCost,
		"mp_cost", ability.MPCost,
		"ap_remaining", aiCombatant.CurrentAP,
		"mp_remaining", aiCombatant.CurrentMP,
	)
}

// ==================== Effect Application ====================

// _ApplyAbilityEffects apply effects ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á ability
func (s *combatService) _ApplyAbilityEffects(
	aiCombatant *domain.Combatant,
	action *AISelectedAction,
) error {
	// Parse effects ‡∏à‡∏≤‡∏Å JSON
	var effects []map[string]interface{}
	err := json.Unmarshal(action.Ability.EffectsJSON, &effects)
	if err != nil {
		s.appLogger.Error("Failed to unmarshal ability effects", err,
			"ability", action.Ability.Name,
		)
		return err
	}

	// ‡∏™‡∏£‡πâ‡∏≤‡∏á dummy spell ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö effect manager
	// (‡πÉ‡∏ä‡πâ‡∏ò‡∏≤‡∏ï‡∏∏‡∏Ç‡∏≠‡∏á enemy ‡πÄ‡∏õ‡πá‡∏ô element ‡∏Ç‡∏≠‡∏á‡πÄ‡∏ß‡∏ó)
	dummySpell := &domain.Spell{
		ElementID: aiCombatant.Enemy.ElementID,
	}

	// Apply ‡πÅ‡∏ï‡πà‡∏•‡∏∞ effect
	s.appLogger.Debug("Applying AI ability effects",
		"ability", action.Ability.Name,
		"effects_count", len(effects),
	)

	for i, effectData := range effects {
		s.appLogger.Debug("Applying effect",
			"effect_index", i,
			"effect_data", effectData,
		)

		// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ effect manager ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
		s.applyEffect(aiCombatant, action.Target, effectData, dummySpell)
	}

	return nil
}
