// file: internal/modules/combat/calculator.go
package combat

import (
	"fmt"
	"sage-of-elements-backend/internal/domain"
	"strconv"
)

// --- ‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏ö‡πâ‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏î‡πâ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì ---

func (s *combatService) calculateEffectValue(caster *domain.Combatant, target *domain.Combatant, spell *domain.Spell, effect *domain.SpellEffect) (float64, error) {
	baseValue := effect.BaseValue
	masteryBonus := 0.0
	talentBonus := s.getTalentBonus(caster, spell)

	var targetElementID uint = 0
	if target.EnemyID != nil && target.Enemy != nil { // ‚≠êÔ∏è ‡πÄ‡∏û‡∏¥‡πà‡∏° nil check
		targetElementID = target.Enemy.ElementID
	}

	elementalModifier, err := s.getElementalModifier(spell.ElementID, targetElementID)
	if err != nil {
		return 0, err
	}

	buffDebuffModifier := 1.0 // TODO: Implement buff/debuff logic
	finalValue := (baseValue + masteryBonus + talentBonus) * elementalModifier * buffDebuffModifier

	s.appLogger.Info("Damage Calculation", "base", baseValue, "talent", talentBonus, "elemental", elementalModifier, "final", finalValue)
	return finalValue, nil
}

// getTalentBonus ‡∏à‡∏∞‡πÑ‡∏õ "‡∏Ñ‡πâ‡∏ô‡∏™‡∏π‡∏ï‡∏£" ‡πÅ‡∏•‡πâ‡∏ß‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠‡πÉ‡∏´‡πâ "‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì"
func (s *combatService) getTalentBonus(caster *domain.Combatant, spell *domain.Spell) float64 {
	if caster.Character == nil {
		return 0.0
	}

	// 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏ß‡πà‡∏≤‡πÄ‡∏ß‡∏ó‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô T0 ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡∏ò‡∏≤‡∏ï‡∏∏‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô 1-4)
	if spell.ElementID <= 4 {
		// ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô T0... ‡∏Å‡πá‡πÉ‡∏ä‡πâ Logic "‡∏Å‡∏é‡∏ò‡∏≤‡∏ï‡∏∏‡πÄ‡∏î‡πà‡∏ô" 100%
		return s.calculateTalentBonusFromRecipe(map[uint]int{spell.ElementID: 1}, caster.Character)
	}

	// 2. ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô T1 ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤... ‡πÉ‡∏´‡πâ‡πÑ‡∏õ "‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏π‡∏ï‡∏£"
	recipe, err := s.gameDataRepo.FindRecipeByOutputElementID(spell.ElementID)
	if err != nil {
		// --- ‚≠êÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ! ‚≠êÔ∏è ---
		// "‡∏¢‡∏±‡∏î" ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• spell.ID ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô "‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°" ‡∏î‡πâ‡∏ß‡∏¢ fmt.Sprintf
		// ‡πÅ‡∏•‡πâ‡∏ß‡∏™‡πà‡∏á "‡∏ï‡∏±‡∏ß err" ‡πÄ‡∏õ‡πá‡∏ô "‡∏Ç‡∏≠‡∏á‡∏ä‡∏¥‡πâ‡∏ô‡∏ó‡∏µ‡πà 2"
		s.appLogger.Error(fmt.Sprintf("Failed to find recipe for T1 spell (spell_id: %d)", spell.ID), err)
		return 0.0 // ‚≠êÔ∏è ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ 0.0 (‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏ö‡∏ô‡∏±‡∏™)
	}
	if recipe == nil {
		s.appLogger.Warn("No recipe found for T1+ spell", "spell_id", spell.ID, "element_id", spell.ElementID)
		return 0.0
	}

	// 3. ‡πÄ‡∏£‡∏≤‡πÑ‡∏î‡πâ "‡∏™‡∏π‡∏ï‡∏£‡∏ú‡∏™‡∏°" (Ingredients) ‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß!
	// ‡πÅ‡∏õ‡∏•‡∏á‡∏™‡∏π‡∏ï‡∏£‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏ô‡∏±‡∏ö‡∏á‡πà‡∏≤‡∏¢ (‡πÄ‡∏ä‡πà‡∏ô map[S]1, map[P]1)
	ingredientCount := make(map[uint]int)
	for _, ing := range recipe.Ingredients {
		ingredientCount[ing.InputElementID]++
	}

	// 4. ‡∏™‡πà‡∏á "‡∏™‡∏π‡∏ï‡∏£‡∏ó‡∏µ‡πà‡∏ô‡∏±‡∏ö‡πÅ‡∏•‡πâ‡∏ß" ‡πÑ‡∏õ‡πÉ‡∏´‡πâ "‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç" ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì!
	return s.calculateTalentBonusFromRecipe(ingredientCount, caster.Character)
}

// --- üìù ‡πÄ‡∏û‡∏¥‡πà‡∏° "‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢" ‡∏Ñ‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏ô‡∏µ‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ! üìù ---
// calculateTalentBonusFromRecipe ‡∏Ñ‡∏∑‡∏≠ "‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì" ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ "‡∏Å‡∏é" ‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤!
func (s *combatService) calculateTalentBonusFromRecipe(ingredients map[uint]int, character *domain.Character) float64 {
	totalBonus := 0.0
	talentDivisor := 10.0 // ‚≠êÔ∏è TODO: ‡∏î‡∏∂‡∏á "10.0" ‡∏°‡∏≤‡∏à‡∏≤‡∏Å Game Config ("TALENT_DMG_DIVISOR")

	// --- Logic ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö T0 (S) ‡πÅ‡∏•‡∏∞ T1 (S+P) ---
	// (‡∏Å‡∏é‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞‡∏Ç‡∏≠‡∏á‡∏ô‡πâ‡∏≠‡∏á‡∏ä‡∏≤‡∏¢: ‡∏¢‡∏Å‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå‡πÉ‡∏´‡πâ 100% ‡∏ó‡∏±‡πâ‡∏á‡∏Ñ‡∏π‡πà)
	if len(ingredients) <= 2 {
		for elementID := range ingredients {
			totalBonus += s.getTalentValue(character, elementID) / talentDivisor
		}
	} else {
		// --- Logic ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö T2+ (‡πÄ‡∏ä‡πà‡∏ô S+S+P) ---
		// TODO: Implement Dominant Element logic (S+S+P -> 100% S, 25% P)
		// (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ... ‡πÄ‡∏£‡∏≤‡πÉ‡∏ä‡πâ Logic ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö T1 ‡πÑ‡∏õ‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡πá‡πÑ‡∏î‡πâ)
		for elementID := range ingredients {
			totalBonus += s.getTalentValue(character, elementID) / talentDivisor
		}
	}

	return totalBonus
}

// (‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡∏π‡∏Å‡∏ï‡∏±‡∏ß‡∏à‡∏¥‡πã‡∏ß ‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡∏∞‡∏≠‡∏≤‡∏î - ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß)
func (s *combatService) getTalentValue(character *domain.Character, elementID uint) float64 {
	switch elementID {
	case 1:
		return float64(character.TalentS)
	case 2:
		return float64(character.TalentL)
	case 3:
		return float64(character.TalentG)
	case 4:
		return float64(character.TalentP)
	default:
		return 0.0
	}
}

func (s *combatService) getElementalModifier(attackerID, defenderID uint) (float64, error) {
	if defenderID == 0 {
		return 1.0, nil
	}

	modifierStr, err := s.gameDataRepo.GetMatchupModifier(attackerID, defenderID)
	if err != nil {
		s.appLogger.Error("Failed to get matchup modifier from repo", err)
		return 1.0, err
	}
	if modifierStr == "" {
		s.appLogger.Warn("Elemental matchup not found, using default 1.0", "attacker", attackerID, "defender", defenderID)
		return 1.0, nil
	}

	modifier, _ := strconv.ParseFloat(modifierStr, 64)
	return modifier, nil
}
