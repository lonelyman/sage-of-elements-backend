// file: internal/modules/combat/calculator.go
package combat

import (
	"encoding/json"
	"fmt"
	"math"
	"sage-of-elements-backend/internal/domain"
	"strconv"
)

// --- ‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏ö‡πâ‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏î‡πâ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì ---
// ‚≠êÔ∏è ‡πÄ‡∏û‡∏¥‡πà‡∏° argument: powerModifier float64 ‚≠êÔ∏è
func (s *combatService) calculateEffectValue(caster *domain.Combatant, target *domain.Combatant, spell *domain.Spell, effect *domain.SpellEffect, powerModifier float64) (float64, error) {
	baseValue := effect.BaseValue
	masteryBonus := 0.0                                             // TODO: Implement mastery bonus
	talentBonus := s.getTalentBonus(caster, spell, effect.EffectID) // ‚≠êÔ∏è ‡∏™‡πà‡∏á EffectID ‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢! ‚≠êÔ∏è

	var targetElementID uint = 0
	if target.EnemyID != nil && target.Enemy != nil {
		targetElementID = target.Enemy.ElementID
	} else if target.CharacterID != nil && target.Character != nil {
		targetElementID = target.Character.PrimaryElementID // ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤ Player ‡∏Å‡πá‡∏°‡∏µ‡∏ò‡∏≤‡∏ï‡∏∏
	}

	elementalModifier := 1.0 // ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
	var err error
	// --- ‚≠êÔ∏è ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ä‡πá‡∏Ñ: Heal ‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡∏™‡∏ô‡∏ò‡∏≤‡∏ï‡∏∏! ‚≠êÔ∏è ---
	isHealEffect := (effect.EffectID == 3 || effect.EffectID == 100) // ID 3 = Heal, 100 = HoT
	if !isHealEffect {
		elementalModifier, err = s.getElementalModifier(spell.ElementID, targetElementID)
		if err != nil {
			// ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÅ‡∏Ñ‡πà Log Warning ‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ä‡πâ 1.0 ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞ Return Error?
			s.appLogger.Error("Failed to get elemental modifier", err, "spell_element", spell.ElementID, "target_element", targetElementID)
			elementalModifier = 1.0
		}
	} else {
		s.appLogger.Info("Skipping elemental modifier for Heal effect", "effect_id", effect.EffectID)
	}
	// ------------------------------------

	buffDebuffModifier := 1.0 // ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô

	var targetEffects []domain.ActiveEffect
	if target.ActiveEffects != nil {
		json.Unmarshal(target.ActiveEffects, &targetEffects)
	}

	for _, activeEffect := range targetEffects {
		// --- ‚≠êÔ∏è ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á Logic Buff/Debuff ‚≠êÔ∏è ---
		switch activeEffect.EffectID {
		case 110: // BUFF_DEFENSE_UP (‡∏Å‡∏≤‡∏¢‡∏≤‡πÄ‡∏´‡∏•‡πá‡∏Å/‡∏ú‡∏¥‡∏ß‡∏®‡∏¥‡∏•‡∏≤)
			if !isHealEffect { // ‡∏ö‡∏±‡∏ü‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô ‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡∏•‡∏î Heal
				// ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤ BaseValue ‡∏Ç‡∏≠‡∏á Effect 110 ‡∏Ñ‡∏∑‡∏≠ % ‡∏•‡∏î‡∏ó‡∏≠‡∏ô (‡πÄ‡∏ä‡πà‡∏ô 0 = ‡πÑ‡∏°‡πà‡∏•‡∏î, 50 = ‡∏•‡∏î 50%)
				// ‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤ Def ‡∏Ñ‡∏á‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏≠‡∏≤‡πÑ‡∏õ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ö Atk? -> ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏ó‡∏≥‡πÅ‡∏ö‡∏ö % ‡πÑ‡∏õ‡∏Å‡πà‡∏≠‡∏ô
				reductionPercent := 0.5 // Default ‡∏•‡∏î 50% ‡∏ñ‡πâ‡∏≤ BaseValue = 0 (‡∏à‡∏≤‡∏Å Harden)
				if activeEffect.Value > 0 {
					reductionPercent = float64(activeEffect.Value) / 100.0 // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ Value ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
				}
				buffDebuffModifier *= (1.0 - reductionPercent) // ‡∏•‡∏î Damage ‡∏ï‡∏≤‡∏° %
				s.appLogger.Info("Applying DEFENSE_UP modifier", "target_id", target.ID, "reduction", reductionPercent)
			}
		case 302: // DEBUFF_VULNERABLE (‡πÄ‡∏õ‡∏¥‡∏î‡∏à‡∏∏‡∏î‡∏≠‡πà‡∏≠‡∏ô/Analyze)
			if !isHealEffect { // Vulnerable ‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏° Heal
				// ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤ BaseValue ‡∏Ç‡∏≠‡∏á Effect 302 ‡∏Ñ‡∏∑‡∏≠ % ‡∏ó‡∏µ‡πà‡πÇ‡∏î‡∏ô‡πÅ‡∏£‡∏á‡∏Ç‡∏∂‡πâ‡∏ô
				increasePercent := float64(activeEffect.Value) / 100.0
				buffDebuffModifier *= (1.0 + increasePercent) // ‡πÄ‡∏û‡∏¥‡πà‡∏° Damage ‡∏ï‡∏≤‡∏° %
				s.appLogger.Info("Applying VULNERABLE modifier", "target_id", target.ID, "increase", increasePercent)
			}
			// TODO: ‡πÄ‡∏û‡∏¥‡πà‡∏° case 103 (BUFF_DAMAGE_UP ‡∏Ç‡∏≠‡∏á Caster) -> ‡∏≠‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏ä‡πá‡∏Ñ‡∏ó‡∏µ‡πà Caster ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà Target
		}
		// ------------------------------------
	}

	// --- ‚ú®‚≠êÔ∏è ‡πÄ‡∏ä‡πá‡∏Ñ Buff ‡∏ó‡∏µ‡πà Caster! ‚≠êÔ∏è‚ú® ---
	var casterEffects []domain.ActiveEffect
	if caster.ActiveEffects != nil {
		err := json.Unmarshal(caster.ActiveEffects, &casterEffects)
		if err != nil {
			s.appLogger.Error("Failed to unmarshal caster active effects", err, "caster_id", caster.ID)
		}
	}
	for _, activeEffect := range casterEffects {
		switch activeEffect.EffectID {
		case 103: // BUFF_DAMAGE_UP (Caster)
			if !isHealEffect { // Damage Up ‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏° Heal
				increasePercent := float64(activeEffect.Value) / 100.0
				buffDebuffModifier *= (1.0 + increasePercent) // ‡πÄ‡∏û‡∏¥‡πà‡∏° Damage ‡∏ï‡∏≤‡∏° % ‡∏à‡∏≤‡∏Å‡∏ö‡∏±‡∏ü‡∏ú‡∏π‡πâ‡∏£‡πà‡∏≤‡∏¢
				s.appLogger.Info("Applying DAMAGE_UP modifier (from Caster)", "caster_id", caster.ID, "increase", increasePercent)
			}
		}
	}
	// --- ‚ú®‚≠êÔ∏è ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πá‡∏Ñ Buff ‡∏ó‡∏µ‡πà Caster ‚≠êÔ∏è‚ú® ---

	// ‚≠êÔ∏è ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Final Value ‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á (‡∏£‡∏ß‡∏° powerModifier!) ‚≠êÔ∏è
	finalValue := (baseValue + masteryBonus + talentBonus) * elementalModifier * buffDebuffModifier * powerModifier

	// ‡∏õ‡∏±‡∏î‡πÄ‡∏®‡∏©‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏°‡πÄ‡∏´‡∏•‡∏∑‡∏≠ 2 ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á (‡πÄ‡∏ú‡∏∑‡πà‡∏≠ Debug ‡∏á‡πà‡∏≤‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô)
	finalValue = math.Round(finalValue*100) / 100

	logMessage := "Effect Value Calculation"
	if isHealEffect {
		logMessage = "Heal Value Calculation"
	}

	s.appLogger.Info(logMessage,
		"base", baseValue,
		"talent", talentBonus,
		"elemental", elementalModifier,
		"buff_debuff", buffDebuffModifier,
		"power_mod", powerModifier,
		"final", finalValue,
		"spell_id", spell.ID,
		"effect_id", effect.EffectID, // ‡πÄ‡∏û‡∏¥‡πà‡∏° EffectID ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô Log
	)
	return finalValue, nil
}

// getTalentBonus ‡∏à‡∏∞‡πÑ‡∏õ "‡∏Ñ‡πâ‡∏ô‡∏™‡∏π‡∏ï‡∏£" ‡πÅ‡∏•‡πâ‡∏ß‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠‡πÉ‡∏´‡πâ "‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì"
func (s *combatService) getTalentBonus(caster *domain.Combatant, spell *domain.Spell, effectID uint) float64 {
	// ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£ (‡πÄ‡∏ä‡πà‡∏ô ‡πÄ‡∏õ‡πá‡∏ô Enemy ‡∏£‡πà‡∏≤‡∏¢) ‡∏Å‡πá‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏ö‡∏ô‡∏±‡∏™ Talent
	if caster.Character == nil {
		return 0.0
	}

	// --- ‚≠êÔ∏è ‡πÄ‡∏û‡∏¥‡πà‡∏° Logic ‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Heal! ‚≠êÔ∏è ---
	// ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤ Effect ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì ‡πÄ‡∏õ‡πá‡∏ô Heal ‡∏´‡∏£‡∏∑‡∏≠ HoT ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
	isHealEffect := (effectID == 3 || effectID == 100)
	if isHealEffect {
		s.appLogger.Info("Calculating Talent Bonus for Heal using TalentL", "effect_id", effectID)
		// ‚≠êÔ∏è TODO: ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡∏´‡∏≤‡∏£ (10.0) ‡∏°‡∏≤‡∏à‡∏≤‡∏Å Game Config ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Heal ‡πÇ‡∏î‡∏¢‡πÄ‡∏â‡∏û‡∏≤‡∏∞ ‚≠êÔ∏è
		talentDivisor := 10.0
		// ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ Talent L (ID 2) ‡πÄ‡∏™‡∏°‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Heal
		return s.getTalentValue(caster.Character, 2) / talentDivisor
	}
	// --- ‚≠êÔ∏è ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î Logic ‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Heal ‚≠êÔ∏è ---

	// --- Logic ‡πÄ‡∏î‡∏¥‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Effect ‡∏≠‡∏∑‡πà‡∏ô‡πÜ (Damage, Debuff, etc.) ---
	// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏ó T0 (‡∏ò‡∏≤‡∏ï‡∏∏‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô 1-4) ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
	if spell.ElementID <= 4 {
		// ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô T0... ‡πÉ‡∏ä‡πâ Talent ‡∏Ç‡∏≠‡∏á‡∏ò‡∏≤‡∏ï‡∏∏‡∏ô‡∏±‡πâ‡∏ô 100%
		return s.calculateTalentBonusFromRecipe(map[uint]int{spell.ElementID: 1}, caster.Character)
	}

	// ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô T1+... ‡πÑ‡∏õ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏π‡∏ï‡∏£‡∏ú‡∏™‡∏°‡∏ò‡∏≤‡∏ï‡∏∏
	recipe, err := s.gameDataRepo.FindRecipeByOutputElementID(spell.ElementID)
	if err != nil {
		s.appLogger.Error(fmt.Sprintf("Failed to find recipe for T1+ spell (spell_id: %d)", spell.ID), err)
		return 0.0 // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ 0.0 ‡∏ñ‡πâ‡∏≤‡∏´‡∏≤‡∏™‡∏π‡∏ï‡∏£‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠
	}
	if recipe == nil {
		s.appLogger.Warn("No recipe found for T1+ spell", "spell_id", spell.ID, "element_id", spell.ElementID)
		return 0.0
	}

	// ‡πÅ‡∏õ‡∏•‡∏á‡∏™‡∏π‡∏ï‡∏£‡πÄ‡∏õ‡πá‡∏ô map ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ò‡∏≤‡∏ï‡∏∏‡∏ï‡∏±‡πâ‡∏á‡∏ï‡πâ‡∏ô
	ingredientCount := make(map[uint]int)
	for _, ing := range recipe.Ingredients {
		ingredientCount[ing.InputElementID]++
	}

	// ‡∏™‡πà‡∏á map ‡∏™‡∏π‡∏ï‡∏£‡πÑ‡∏õ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÇ‡∏ö‡∏ô‡∏±‡∏™ Talent ‡∏ï‡∏≤‡∏°‡∏Å‡∏é (‡πÄ‡∏ä‡πà‡∏ô ‡∏Å‡∏é‡∏ò‡∏≤‡∏ï‡∏∏‡πÄ‡∏î‡πà‡∏ô)
	return s.calculateTalentBonusFromRecipe(ingredientCount, caster.Character)
}

// --- üìù ‡πÄ‡∏û‡∏¥‡πà‡∏° "‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢" ‡∏Ñ‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏ô‡∏µ‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ! üìù ---
// calculateTalentBonusFromRecipe ‡∏Ñ‡∏∑‡∏≠ "‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì" ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ "‡∏Å‡∏é" ‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤!
func (s *combatService) calculateTalentBonusFromRecipe(ingredients map[uint]int, character *domain.Character) float64 {
	totalBonus := 0.0
	talentDivisor := 10.0 // ‚≠êÔ∏è TODO: ‡∏î‡∏∂‡∏á "10.0" ‡∏°‡∏≤‡∏à‡∏≤‡∏Å Game Config ("TALENT_DMG_DIVISOR")

	// --- Logic ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö T0 (S) ‡πÅ‡∏•‡∏∞ T1 (S+P) ---
	// (‡∏Å‡∏é‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞‡∏Ç‡∏≠‡∏á‡∏ô‡πâ‡∏≠‡∏á‡∏ä‡∏≤‡∏¢: ‡∏¢‡∏Å‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå‡πÉ‡∏´‡πâ 100% ‡∏ó‡∏±‡πâ‡∏á‡∏Ñ‡∏π‡πà)
	if len(ingredients) <= 2 {
		for elementID := range ingredients {
			totalBonus += s.getTalentValue(character, elementID) / talentDivisor
		}
	} else {
		// --- Logic ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö T2+ (‡πÄ‡∏ä‡πà‡∏ô S+S+P) ---
		// TODO: Implement Dominant Element logic (S+S+P -> 100% S, 25% P)
		// (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ... ‡πÄ‡∏£‡∏≤‡πÉ‡∏ä‡πâ Logic ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö T1 ‡πÑ‡∏õ‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡πá‡πÑ‡∏î‡πâ)
		for elementID := range ingredients {
			totalBonus += s.getTalentValue(character, elementID) / talentDivisor
		}
	}

	return totalBonus
}

// (‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡∏π‡∏Å‡∏ï‡∏±‡∏ß‡∏à‡∏¥‡πã‡∏ß ‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡∏∞‡∏≠‡∏≤‡∏î - ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß)
func (s *combatService) getTalentValue(character *domain.Character, elementID uint) float64 {
	switch elementID {
	case 1:
		return float64(character.TalentS)
	case 2:
		return float64(character.TalentL)
	case 3:
		return float64(character.TalentG)
	case 4:
		return float64(character.TalentP)
	default:
		return 0.0
	}
}

func (s *combatService) getElementalModifier(attackerID, defenderID uint) (float64, error) {
	if defenderID == 0 {
		return 1.0, nil
	}

	modifierStr, err := s.gameDataRepo.GetMatchupModifier(attackerID, defenderID)
	if err != nil {
		s.appLogger.Error("Failed to get matchup modifier from repo", err)
		return 1.0, err
	}
	if modifierStr == "" {
		s.appLogger.Warn("Elemental matchup not found, using default 1.0", "attacker", attackerID, "defender", defenderID)
		return 1.0, nil
	}

	modifier, _ := strconv.ParseFloat(modifierStr, 64)
	return modifier, nil
}
