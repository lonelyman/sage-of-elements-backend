// file: internal/modules/combat/effect_buffs.go
package combat

import (
	"encoding/json"
	"math"
	"sage-of-elements-backend/internal/domain"
)

// ============================================================================
// üìå BUFF EFFECTS (2000s Range)
// ============================================================================
// Effect IDs: 2101 (HP Regen), 2102 (MP Regen), 2201 (Evasion),
//             2202 (Damage Up), 2203 (Retaliation), 2204 (Defense Up)
// ============================================================================

// --- ‚≠êÔ∏è ‡∏ö‡∏±‡∏ü HP Regen ‚≠êÔ∏è ---
func (s *combatService) applyBuffHpRegen(caster *domain.Combatant, target *domain.Combatant, effectData map[string]interface{}) {
	// --- ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Type Assertion ---
	valueFloat, ok1 := effectData["value"].(float64)       // ‡∏Ñ‡πà‡∏≤‡∏Æ‡∏µ‡∏•‡∏ï‡πà‡∏≠‡πÄ‡∏ó‡∏¥‡∏£‡πå‡∏ô
	durationFloat, ok2 := effectData["duration"].(float64) // ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤
	if !ok1 || !ok2 {
		s.appLogger.Warn("Invalid or missing value or duration in effectData for applyBuffHpRegen", effectData)
		return // ‡πÑ‡∏°‡πà‡πÅ‡∏õ‡∏∞‡∏ö‡∏±‡∏ü‡∏ñ‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
	}
	// -----------------------------

	// --- ‚≠êÔ∏è ‡∏Ñ‡∏¥‡∏î‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÉ‡∏´‡πâ‡∏Ñ‡πà‡∏≤ Heal ‡∏ï‡πà‡∏≠‡πÄ‡∏ó‡∏¥‡∏£‡πå‡∏ô scale ‡∏Å‡∏±‡∏ö Talent ‡πÑ‡∏´‡∏°? ‚≠êÔ∏è ---
	// Option 1: ‡πÑ‡∏°‡πà scale ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤ BaseValue ‡∏ï‡∏£‡∏á‡πÜ (‡∏á‡πà‡∏≤‡∏¢‡∏™‡∏∏‡∏î - ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÉ‡∏ä‡πâ‡∏≠‡∏±‡∏ô‡∏ô‡∏µ‡πâ)
	healPerTurn := int(math.Round(valueFloat))
	// Option 2: Scale ‡∏Å‡∏±‡∏ö Talent L (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô Heal ‡∏ï‡∏£‡∏á) -> ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏Å calculateEffectValue
	// ‡∏ñ‡πâ‡∏≤‡∏à‡∏∞‡∏ó‡∏≥ Option 2 ‡∏ï‡πâ‡∏≠‡∏á‡∏™‡πà‡∏á spell ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡πÉ‡∏´‡πâ function ‡∏ô‡∏µ‡πâ‡∏î‡πâ‡∏ß‡∏¢
	// -----------------------------------------------------------------

	duration := int(durationFloat)
	if healPerTurn < 0 {
		healPerTurn = 0
	} // Heal ‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡∏ï‡∏¥‡∏î‡∏•‡∏ö

	var activeEffects []domain.ActiveEffect
	if target.ActiveEffects != nil {
		err := json.Unmarshal(target.ActiveEffects, &activeEffects)
		// ‡πÄ‡∏û‡∏¥‡πà‡∏° error handling ‡∏ï‡∏≠‡∏ô unmarshal ‡πÄ‡∏ú‡∏∑‡πà‡∏≠ JSON ‡πÄ‡∏™‡∏µ‡∏¢
		if err != nil {
			s.appLogger.Error("Failed to unmarshal existing active effects for HP Regen buff", err, "target_id", target.ID)
			// ‡∏≠‡∏≤‡∏à‡∏à‡∏∞ return ‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏∞‡∏•‡∏≠‡∏á‡πÅ‡∏õ‡∏∞‡∏ö‡∏±‡∏ü‡∏ó‡∏±‡∏ö‡πÑ‡∏õ‡πÄ‡∏•‡∏¢‡∏Å‡πá‡πÑ‡∏î‡πâ ‡∏Ç‡∏∂‡πâ‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö
			activeEffects = []domain.ActiveEffect{} // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏ñ‡πâ‡∏≤ unmarshal ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ
		}
	}

	// ‡∏™‡∏£‡πâ‡∏≤‡∏á Object ‡∏ö‡∏±‡∏ü‡πÉ‡∏´‡∏°‡πà
	newEffect := domain.ActiveEffect{
		EffectID:       2101,        // BUFF_HP_REGEN
		Value:          healPerTurn, // ‡∏Ñ‡πà‡∏≤ HP ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ü‡∏∑‡πâ‡∏ô‡∏ï‡πà‡∏≠‡πÄ‡∏ó‡∏¥‡∏£‡πå‡∏ô
		TurnsRemaining: duration,
		SourceID:       caster.ID,
	}

	// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏±‡∏ü‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô list
	activeEffects = append(activeEffects, newEffect)

	// ‡πÅ‡∏õ‡∏•‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô JSON ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡πá‡∏ö‡∏•‡∏á DB
	newEffectsJSON, err := json.Marshal(activeEffects)
	if err != nil {
		s.appLogger.Error("Failed to marshal updated active effects for HP Regen buff", err, "target_id", target.ID)
		return // ‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ñ‡πâ‡∏≤ marshal ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ
	}
	target.ActiveEffects = newEffectsJSON

	s.appLogger.Info("Applied BUFF_HP_REGEN effect", "target", target.ID, "duration", duration, "heal_per_turn", healPerTurn)
}

// --- ‚≠êÔ∏è ‡∏ö‡∏±‡∏ü MP Regen ‚≠êÔ∏è ---
func (s *combatService) applyBuffMpRegen(caster *domain.Combatant, target *domain.Combatant, effectData map[string]interface{}) {
	// --- ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Type Assertion ---
	// Effect ‡∏ô‡∏µ‡πâ‡∏°‡∏≤‡∏à‡∏≤‡∏Å Meditate ‡∏ã‡∏∂‡πà‡∏á BaseValue=10 ‡πÉ‡∏ô Seed (‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á)
	valueFloat, ok1 := effectData["value"].(float64)
	durationFloat, ok2 := effectData["duration"].(float64)
	if !ok1 || !ok2 {
		s.appLogger.Warn("Invalid or missing value or duration in effectData for applyBuffMpRegen", effectData)
		return
	}
	// -----------------------------

	// --- ‚≠êÔ∏è ‡∏Ñ‡∏¥‡∏î‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÉ‡∏´‡πâ‡∏Ñ‡πà‡∏≤ Regen ‡∏ï‡πà‡∏≠‡πÄ‡∏ó‡∏¥‡∏£‡πå‡∏ô scale ‡∏Å‡∏±‡∏ö Talent ‡πÑ‡∏´‡∏°? ‚≠êÔ∏è ---
	// Option 1: ‡πÑ‡∏°‡πà scale ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤ BaseValue ‡∏ï‡∏£‡∏á‡πÜ (‡∏á‡πà‡∏≤‡∏¢‡∏™‡∏∏‡∏î)
	regenPerTurn := int(math.Round(valueFloat))
	// Option 2: Scale ‡∏Å‡∏±‡∏ö Talent L (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô Heal) -> ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏Å calculateEffectValue
	// ‡∏ï‡πâ‡∏≠‡∏á‡∏™‡πà‡∏á spell ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏ñ‡πâ‡∏≤‡∏à‡∏∞ scale... ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏≠‡∏≤‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà scale ‡∏Å‡πà‡∏≠‡∏ô
	// -----------------------------------------------------------------

	duration := int(durationFloat)
	if regenPerTurn < 0 {
		regenPerTurn = 0
	} // Regen ‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡∏ï‡∏¥‡∏î‡∏•‡∏ö

	var activeEffects []domain.ActiveEffect
	if target.ActiveEffects != nil {
		json.Unmarshal(target.ActiveEffects, &activeEffects)
	}

	newEffect := domain.ActiveEffect{
		EffectID:       2102,         // BUFF_MP_REGEN
		Value:          regenPerTurn, // ‡∏Ñ‡πà‡∏≤ MP ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ü‡∏∑‡πâ‡∏ô‡∏ï‡πà‡∏≠‡πÄ‡∏ó‡∏¥‡∏£‡πå‡∏ô
		TurnsRemaining: duration,
		SourceID:       caster.ID,
	}
	activeEffects = append(activeEffects, newEffect)
	newEffectsJSON, _ := json.Marshal(activeEffects)
	target.ActiveEffects = newEffectsJSON

	s.appLogger.Info("Applied BUFF_MP_REGEN effect", "target", target.ID, "duration", duration, "regen_per_turn", regenPerTurn)
}

// --- ‚≠êÔ∏è ‡∏ö‡∏±‡∏ü Evasion ‚≠êÔ∏è ---
func (s *combatService) applyBuffEvasion(caster *domain.Combatant, target *domain.Combatant, effectData map[string]interface{}) {
	// --- ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Type Assertion ---
	// Blur (ID 10) ‡∏°‡∏µ BaseValue: 20, Duration: 1
	valueFloat, ok1 := effectData["value"].(float64)       // % ‡∏´‡∏•‡∏ö‡∏´‡∏•‡∏µ‡∏Å
	durationFloat, ok2 := effectData["duration"].(float64) // ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤
	if !ok1 || !ok2 {
		s.appLogger.Warn("Invalid or missing value or duration in effectData for applyBuffEvasion", "data", effectData)
		return
	}
	// -----------------------------

	// --- ‚≠êÔ∏è Evasion ‡∏Ñ‡∏ß‡∏£ Scale ‡∏Å‡∏±‡∏ö Talent ‡πÑ‡∏´‡∏°? (‡πÄ‡∏ä‡πà‡∏ô Talent G?) ‚≠êÔ∏è ---
	// Option 1: ‡πÑ‡∏°‡πà scale ‡πÉ‡∏ä‡πâ BaseValue ‡∏ï‡∏£‡∏á‡πÜ (‡∏á‡πà‡∏≤‡∏¢‡∏™‡∏∏‡∏î - ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏±‡∏ô‡∏ô‡∏µ‡πâ)
	evasionPercent := int(math.Round(valueFloat))
	// Option 2: Scale ‡∏Å‡∏±‡∏ö Talent G -> ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏Å calculateEffectValue ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á spell
	// -----------------------------------------------------------------

	duration := int(durationFloat)
	// ‡∏Å‡∏±‡∏ô‡∏Ñ‡πà‡∏≤ % ‡πÅ‡∏õ‡∏•‡∏Å‡πÜ (‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á 0-100)
	if evasionPercent < 0 {
		evasionPercent = 0
	}
	if evasionPercent > 100 {
		evasionPercent = 100
	} // ‡∏≠‡∏≤‡∏à‡∏à‡∏∞ Cap ‡∏ó‡∏µ‡πà 95%?

	var activeEffects []domain.ActiveEffect
	if target.ActiveEffects != nil {
		err := json.Unmarshal(target.ActiveEffects, &activeEffects)
		if err != nil {
			s.appLogger.Error("Failed to unmarshal existing active effects for Evasion buff", err, "target_id", target.ID)
			activeEffects = []domain.ActiveEffect{}
		}
	}

	// --- ‚≠êÔ∏è ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Evasion Stack ‡∏¢‡∏±‡∏á‡πÑ‡∏á? ‚≠êÔ∏è ---
	// Option A: ‡πÑ‡∏°‡πà Stack, ‡∏≠‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏±‡∏ö‡∏≠‡∏±‡∏ô‡πÄ‡∏Å‡πà‡∏≤ (‡∏á‡πà‡∏≤‡∏¢‡∏™‡∏∏‡∏î - ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏ó‡∏≥‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ)
	// Option B: Stack ‡πÅ‡∏ï‡πà‡∏°‡∏µ Cap (‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô)
	// Option C: Refresh Duration ‡∏≠‡∏±‡∏ô‡πÄ‡∏Å‡πà‡∏≤ (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á Stance)
	// ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏ó‡∏≥‡πÅ‡∏ö‡∏ö A: ‡∏•‡∏ö‡∏≠‡∏±‡∏ô‡πÄ‡∏Å‡πà‡∏≤ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ) ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà
	var tempEffects []domain.ActiveEffect
	for _, effect := range activeEffects {
		if effect.EffectID != 2201 { // BUFF_EVASION - ‡πÄ‡∏Å‡πá‡∏ö Effect ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÑ‡∏ß‡πâ
			tempEffects = append(tempEffects, effect)
		} else {
			s.appLogger.Info("Replacing existing Evasion buff", "target_id", target.ID)
		}
	}
	activeEffects = tempEffects // ‡πÉ‡∏ä‡πâ list ‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß
	// ------------------------------------

	// ‡∏™‡∏£‡πâ‡∏≤‡∏á Object ‡∏ö‡∏±‡∏ü‡πÉ‡∏´‡∏°‡πà
	newEffect := domain.ActiveEffect{
		EffectID:       2201,           // BUFF_EVASION
		Value:          evasionPercent, // % ‡∏´‡∏•‡∏ö‡∏´‡∏•‡∏µ‡∏Å
		TurnsRemaining: duration,
		SourceID:       caster.ID,
	}
	activeEffects = append(activeEffects, newEffect)

	// ‡πÅ‡∏õ‡∏•‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô JSON
	newEffectsJSON, _ := json.Marshal(activeEffects) // Error handling?
	target.ActiveEffects = newEffectsJSON

	s.appLogger.Info("Applied BUFF_EVASION effect", "target", target.ID, "duration", duration, "evasion_percent", evasionPercent)
}

// --- ‚≠êÔ∏è ‡∏ö‡∏±‡∏ü Damage Up ‚≠êÔ∏è ---
func (s *combatService) applyBuffDamageUp(caster *domain.Combatant, target *domain.Combatant, effectData map[string]interface{}) {
	// --- ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Type Assertion ---
	// Empower (ID 15) ‡∏°‡∏µ BaseValue: 15, Duration: 1
	valueFloat, ok1 := effectData["value"].(float64)       // % ‡πÄ‡∏û‡∏¥‡πà‡∏° Damage
	durationFloat, ok2 := effectData["duration"].(float64) // ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤
	if !ok1 || !ok2 {
		s.appLogger.Warn("Invalid or missing value or duration in effectData for applyBuffDamageUp", "data", effectData)
		return
	}
	// -----------------------------

	// --- ‚≠êÔ∏è Damage Buff ‡∏Ñ‡∏ß‡∏£ Scale ‡∏Å‡∏±‡∏ö Talent ‡πÑ‡∏´‡∏°? (‡πÄ‡∏ä‡πà‡∏ô Talent P?) ‚≠êÔ∏è ---
	// Option 1: ‡πÑ‡∏°‡πà scale ‡πÉ‡∏ä‡πâ BaseValue ‡∏ï‡∏£‡∏á‡πÜ (‡∏á‡πà‡∏≤‡∏¢‡∏™‡∏∏‡∏î - ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏±‡∏ô‡∏ô‡∏µ‡πâ)
	damageIncreasePercent := int(math.Round(valueFloat))
	// Option 2: Scale ‡∏Å‡∏±‡∏ö Talent P -> ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏Å calculateEffectValue ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á spell
	// -----------------------------------------------------------------

	duration := int(durationFloat)
	if damageIncreasePercent < 0 {
		damageIncreasePercent = 0
	} // ‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡∏ï‡∏¥‡∏î‡∏•‡∏ö

	// ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á Damage Buff ‡∏Ñ‡∏∑‡∏≠ Caster ‡πÄ‡∏™‡∏°‡∏≠ (‡∏ï‡∏≤‡∏° Logic ‡πÉ‡∏ô executeCastSpell ‡∏ó‡∏µ‡πà override target ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Buff)
	var activeEffects []domain.ActiveEffect
	if target.ActiveEffects != nil { // target ‡πÉ‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∑‡∏≠ caster
		err := json.Unmarshal(target.ActiveEffects, &activeEffects)
		if err != nil {
			s.appLogger.Error("Failed to unmarshal existing active effects for Damage Up buff", err, "target_id", target.ID)
			activeEffects = []domain.ActiveEffect{}
		}
	}

	// --- ‚≠êÔ∏è ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Stack ‡∏¢‡∏±‡∏á‡πÑ‡∏á? (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô Evasion: ‡∏≠‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏±‡∏ö‡∏≠‡∏±‡∏ô‡πÄ‡∏Å‡πà‡∏≤) ‚≠êÔ∏è ---
	var tempEffects []domain.ActiveEffect
	for _, effect := range activeEffects {
		if effect.EffectID != 2202 { // BUFF_DMG_UP
			tempEffects = append(tempEffects, effect)
		} else {
			s.appLogger.Info("Replacing existing Damage Up buff", "target_id", target.ID)
		}
	}
	activeEffects = tempEffects
	// ------------------------------------

	// ‡∏™‡∏£‡πâ‡∏≤‡∏á Object ‡∏ö‡∏±‡∏ü‡πÉ‡∏´‡∏°‡πà
	newEffect := domain.ActiveEffect{
		EffectID:       2202,                  // BUFF_DMG_UP
		Value:          damageIncreasePercent, // % ‡πÄ‡∏û‡∏¥‡πà‡∏° Damage
		TurnsRemaining: duration,
		SourceID:       caster.ID, // Source ‡∏Ñ‡∏∑‡∏≠ caster ‡∏Ñ‡∏ô‡πÄ‡∏î‡∏¥‡∏°
	}
	activeEffects = append(activeEffects, newEffect)

	// ‡πÅ‡∏õ‡∏•‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô JSON
	newEffectsJSON, _ := json.Marshal(activeEffects)
	target.ActiveEffects = newEffectsJSON // target ‡∏Ñ‡∏∑‡∏≠ caster

	s.appLogger.Info("Applied BUFF_DAMAGE_UP effect", "target", target.ID, "duration", duration, "damage_increase_percent", damageIncreasePercent)
}

// --- ‚≠êÔ∏è ‡∏ö‡∏±‡∏ü Retaliation ‚≠êÔ∏è ---
func (s *combatService) applyBuffRetaliation(caster *domain.Combatant, target *domain.Combatant, effectData map[string]interface{}) {
	// --- ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Type Assertion ---
	// ‡πÄ‡∏ß‡∏ó ID 14 (StaticField) ‡∏°‡∏µ BaseValue: 10, Duration: 2 (‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏£‡∏≤‡πÅ‡∏Å‡πâ Seeder)
	valueFloat, ok1 := effectData["value"].(float64)       // Damage ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡∏∞‡∏ó‡πâ‡∏≠‡∏ô
	durationFloat, ok2 := effectData["duration"].(float64) // ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤
	if !ok1 || !ok2 {
		s.appLogger.Warn("Invalid or missing value or duration in effectData for applyBuffRetaliation", "data", effectData)
		return
	}
	// -----------------------------

	retaliationDamage := int(math.Round(valueFloat))
	duration := int(durationFloat)
	if retaliationDamage < 0 {
		retaliationDamage = 0
	}

	var activeEffects []domain.ActiveEffect
	if target.ActiveEffects != nil {
		err := json.Unmarshal(target.ActiveEffects, &activeEffects)
		if err != nil {
			s.appLogger.Error("Failed to unmarshal existing active effects for Retaliation buff", err, "target_id", target.ID)
			activeEffects = []domain.ActiveEffect{}
		}
	}

	// --- ‚≠êÔ∏è ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Stack: (‡∏≠‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏±‡∏ö‡∏≠‡∏±‡∏ô‡πÄ‡∏Å‡πà‡∏≤) ‚≠êÔ∏è ---
	var tempEffects []domain.ActiveEffect
	for _, effect := range activeEffects {
		if effect.EffectID != 2203 { // BUFF_RETALIATION - ‡πÄ‡∏Å‡πá‡∏ö Effect ‡∏≠‡∏∑‡πà‡∏ô‡πÜ
			tempEffects = append(tempEffects, effect)
		} else {
			s.appLogger.Info("Replacing existing Retaliation buff", "target_id", target.ID)
		}
	}
	activeEffects = tempEffects
	// -----------------------------------------------------------------

	// ‡∏™‡∏£‡πâ‡∏≤‡∏á Object Buff ‡πÉ‡∏´‡∏°‡πà
	newEffect := domain.ActiveEffect{
		EffectID:       2203,              // BUFF_RETALIATION
		Value:          retaliationDamage, // Damage ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡∏∞‡∏ó‡πâ‡∏≠‡∏ô
		TurnsRemaining: duration,
		SourceID:       caster.ID,
	}
	activeEffects = append(activeEffects, newEffect)

	// ‡πÅ‡∏õ‡∏•‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô JSON
	newEffectsJSON, err := json.Marshal(activeEffects)
	if err != nil {
		s.appLogger.Error("Failed to marshal updated active effects for Retaliation buff", err, "target_id", target.ID)
		return
	}
	target.ActiveEffects = newEffectsJSON

	s.appLogger.Info("Applied BUFF_RETALIATION effect", "target", target.ID, "duration", duration, "retaliation_damage", retaliationDamage)
}

// --- ‚≠êÔ∏è ‡∏ö‡∏±‡∏ü Defense Up ‚≠êÔ∏è ---
func (s *combatService) applyBuffDefenseUp(caster *domain.Combatant, target *domain.Combatant, effectData map[string]interface{}) {
	// (‡∏ó‡πà‡∏≤ S_HARDEN ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡πà‡∏á "value" ‡∏°‡∏≤, ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤ value = 0)
	value := 0
	if v, ok := effectData["value"]; ok {
		value = int(v.(float64))
	}
	duration := int(effectData["duration"].(float64))

	var activeEffects []domain.ActiveEffect
	if target.ActiveEffects != nil {
		json.Unmarshal(target.ActiveEffects, &activeEffects)
	}
	newEffect := domain.ActiveEffect{
		EffectID:       2204, // BUFF_DEFENSE_UP
		Value:          value,
		TurnsRemaining: duration,
		SourceID:       caster.ID,
	}
	activeEffects = append(activeEffects, newEffect)
	newEffectsJSON, _ := json.Marshal(activeEffects)
	target.ActiveEffects = newEffectsJSON
	s.appLogger.Info("Applied BUFF_DEFENSE_UP effect", "target", target.ID, "duration", duration)
}
