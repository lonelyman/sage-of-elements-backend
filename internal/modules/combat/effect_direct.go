// file: internal/modules/combat/effect_direct.go
package combat

import (
	"encoding/json"
	"math"
	"math/rand"
	"sage-of-elements-backend/internal/domain"
	"sort"
)

// ============================================================================
// üìå DIRECT EFFECTS (1000s Range)
// ============================================================================
// Effect IDs: 1101 (Damage), 1102 (Shield), 1103 (Heal), 1104 (MP Damage)
// ============================================================================

// --- ‚≠êÔ∏è ‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏î‡πâ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥ Damage (‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏Å‡∏£‡∏î‡πÄ‡∏ï‡πá‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö) ‚≠êÔ∏è ---
func (s *combatService) applyDamage(caster *domain.Combatant, target *domain.Combatant, effectData map[string]interface{}, spell *domain.Spell) {

	// --- ‚≠êÔ∏è ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1: Logic ‡πÄ‡∏ä‡πá‡∏Ñ Evasion (‡∏´‡∏•‡∏ö‡∏´‡∏•‡∏µ‡∏Å) ‚≠êÔ∏è ---
	// ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏ä‡πá‡∏Ñ‡∏Å‡πà‡∏≠‡∏ô! ‡∏ñ‡πâ‡∏≤‡∏´‡∏•‡∏ö‡πÑ‡∏î‡πâ ‡∏Ñ‡∏∑‡∏≠‡∏à‡∏ö‡πÄ‡∏•‡∏¢ ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏≠‡∏∞‡πÑ‡∏£‡∏ï‡πà‡∏≠
	var targetActiveEffectsForEvasion []domain.ActiveEffect // ‚≠êÔ∏è ‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡πà‡∏ß‡∏ô
	evasionChance := 0                                      // % ‡∏´‡∏•‡∏ö‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
	hasEvasionBuff := false

	if target.ActiveEffects != nil {
		// ‚≠êÔ∏è ‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÉ‡∏´‡∏°‡πà (targetActiveEffectsForEvasion)
		err := json.Unmarshal(target.ActiveEffects, &targetActiveEffectsForEvasion)
		if err == nil {
			for _, effect := range targetActiveEffectsForEvasion {
				if effect.EffectID == 2201 { // BUFF_EVASION
					evasionChance = effect.Value // ‡∏î‡∏∂‡∏á % ‡∏´‡∏•‡∏ö‡∏´‡∏•‡∏µ‡∏Å‡∏°‡∏≤‡∏à‡∏≤‡∏Å Value ‡∏Ç‡∏≠‡∏á‡∏ö‡∏±‡∏ü
					hasEvasionBuff = true
					s.appLogger.Info("Target has Evasion buff", "target_id", target.ID, "chance", evasionChance)
					break // ‡πÄ‡∏à‡∏≠‡∏≠‡∏±‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏û‡∏≠ (‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤ Evasion ‡πÑ‡∏°‡πà Stack?)
				}
			}
		}
	}

	if hasEvasionBuff && evasionChance > 0 {
		// ‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏Ç 0-99
		roll := rand.Intn(100) // ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Ñ‡∏∑‡∏≠ 0 ‡∏ñ‡∏∂‡∏á 99
		s.appLogger.Info("Performing Evasion check", "target_id", target.ID, "chance", evasionChance, "roll", roll)
		if roll < evasionChance { // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏•‡∏Ç‡∏™‡∏∏‡πà‡∏° < ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏´‡∏•‡∏ö
			s.appLogger.Info("Attack EVADED!", "caster", caster.ID, "target", target.ID, "spell_id", spell.ID)
			// TODO: ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏™‡πà‡∏á Event ‡∏ö‡∏≠‡∏Å Client ‡∏ß‡πà‡∏≤ "MISS!"
			return // ‚≠êÔ∏è ‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô! ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Damage ‡∏´‡∏£‡∏∑‡∏≠ Shield ‡∏ï‡πà‡∏≠!
		} else {
			s.appLogger.Info("Evasion check failed, attack proceeds", "target_id", target.ID)
		}
	}
	// --- ‚≠êÔ∏è ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î Logic Evasion ‚≠êÔ∏è ---

	// --- ‚≠êÔ∏è ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 2: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (Validation) ‡πÅ‡∏•‡∏∞‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Å‡∏≤‡∏£ ‚≠êÔ∏è ---
	effectIDFloat, ok1 := effectData["effect_id"].(float64)
	baseValueFloat, ok2 := effectData["value"].(float64)
	powerModifierFloat, ok3 := effectData["power_modifier"].(float64)
	if !ok1 || !ok2 {
		s.appLogger.Warn("Invalid or missing effect_id or value in effectData for applyDamage", "data", effectData)
		return // ‡πÑ‡∏°‡πà‡∏ó‡∏≥ Damage ‡∏ñ‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
	}
	if !ok3 {
		powerModifierFloat = 1.0 // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ power_modifier (‡πÄ‡∏ä‡πà‡∏ô AI ‡πÇ‡∏à‡∏°‡∏ï‡∏µ) ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤ Default 1.0
	}
	// ------------------------------------

	tempSpellEffect := &domain.SpellEffect{
		EffectID:  uint(effectIDFloat),
		BaseValue: baseValueFloat,
	}
	powerModifier := powerModifierFloat // ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß

	// --- ‚≠êÔ∏è ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 3: ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Damage ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô (Base Calculation) ‚≠êÔ∏è ---
	// (‡πÄ‡∏£‡∏µ‡∏¢‡∏Å calculateEffectValue ‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏£‡∏ß‡∏° Talent, ‡∏ö‡∏±‡∏ü Caster, ‡∏ò‡∏≤‡∏ï‡∏∏ ‡∏Ø‡∏•‡∏Ø)
	calculatedDamage, err := s.calculateEffectValue(caster, target, spell, tempSpellEffect, powerModifier)
	if err != nil {
		s.appLogger.Error("Error calculating damage value", err)
		return
	}

	// --- ‚≠êÔ∏è ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 4: Logic ‡πÄ‡∏ä‡πá‡∏Ñ Vulnerable (ID 4102) ‡∏ö‡∏ô‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ ‚≠êÔ∏è ---
	// (‡πÄ‡∏û‡∏¥‡πà‡∏° Damage ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö)
	var targetActiveEffectsForVulnerable []domain.ActiveEffect
	damageIncreasePercent := 0 // % Damage ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô (Default = 0)
	hasVulnerableDebuff := false

	if target.ActiveEffects != nil {
		// ‚≠êÔ∏è ‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÉ‡∏´‡∏°‡πà (targetActiveEffectsForVulnerable)
		err := json.Unmarshal(target.ActiveEffects, &targetActiveEffectsForVulnerable)
		if err == nil {
			for _, effect := range targetActiveEffectsForVulnerable {
				if effect.EffectID == 4102 { // DEBUFF_VULNERABLE
					damageIncreasePercent = effect.Value // ‡∏î‡∏∂‡∏á % ‡∏°‡∏≤‡∏à‡∏≤‡∏Å Value
					hasVulnerableDebuff = true
					s.appLogger.Info("Target has Vulnerable debuff", "target_id", target.ID, "increase_percent", damageIncreasePercent)
					break // ‡πÄ‡∏à‡∏≠‡∏≠‡∏±‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏û‡∏≠ (‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà Stack)
				}
			}
		} else {
			s.appLogger.Error("Failed to unmarshal active effects for Vulnerable check", err, "target_id", target.ID)
		}
	}

	if hasVulnerableDebuff && damageIncreasePercent > 0 {
		// ‡πÄ‡∏û‡∏¥‡πà‡∏° Damage (‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏ö‡∏ö % ‡∏Ç‡∏≠‡∏á float64)
		multiplier := 1.0 + (float64(damageIncreasePercent) / 100.0) // ‡πÄ‡∏ä‡πà‡∏ô 10% -> 1.1
		originalCalculatedDamage := calculatedDamage                 // ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡∏î‡∏π‡πÉ‡∏ô Log
		calculatedDamage = calculatedDamage * multiplier
		s.appLogger.Info("Applied Vulnerable damage increase", "target_id", target.ID, "original_damage", originalCalculatedDamage, "multiplier", multiplier, "final_damage", calculatedDamage)
	}
	// --- ‚≠êÔ∏è ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î Logic Vulnerable ‚≠êÔ∏è ---

	// --- ‚≠êÔ∏è ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 5: ‡πÅ‡∏õ‡∏•‡∏á Damage ‡πÄ‡∏õ‡πá‡∏ô int (‡∏´‡∏•‡∏±‡∏á‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì % ‡πÅ‡∏•‡πâ‡∏ß) ‚≠êÔ∏è ---
	damageDealt := int(math.Round(calculatedDamage)) // ‡∏õ‡∏±‡∏î‡πÄ‡∏®‡∏© Damage
	if damageDealt < 0 {
		damageDealt = 0
	} // Damage ‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡∏ï‡∏¥‡∏î‡∏•‡∏ö

	// --- ‚≠êÔ∏è ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 6: Logic ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Shield (ID 1102) ‡∏ö‡∏ô‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ ‚≠êÔ∏è ---
	// (‡∏•‡∏î Damage ‡∏î‡πâ‡∏ß‡∏¢ Shield ‡∏Å‡πà‡∏≠‡∏ô)
	remainingDamage := damageDealt           // Damage ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏´‡∏±‡∏Å Shield
	var activeEffects []domain.ActiveEffect  // List ‡∏ö‡∏±‡∏ü/‡∏î‡∏µ‡∏ö‡∏±‡∏ü ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢
	var updatedEffects []domain.ActiveEffect // List ‡∏ö‡∏±‡∏ü/‡∏î‡∏µ‡∏ö‡∏±‡∏ü ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏•‡∏±‡∏á‡∏à‡∏ö Logic ‡∏ô‡∏µ‡πâ
	hasShieldEffect := false                 // Flag ‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏°‡∏µ Shield ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
	shieldAbsorbedTotal := 0                 // ‡πÄ‡∏Å‡πá‡∏ö‡∏ß‡πà‡∏≤ Shield ‡∏î‡∏π‡∏î‡∏ã‡∏±‡∏ö‡πÑ‡∏õ‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏´‡∏£‡πà

	if target.ActiveEffects != nil {
		err := json.Unmarshal(target.ActiveEffects, &activeEffects)
		if err == nil { // ‡∏ñ‡πâ‡∏≤ Unmarshal ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
			tempEffects := make([]domain.ActiveEffect, len(activeEffects))
			copy(tempEffects, activeEffects)

			// ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö Shield ‡∏ï‡∏≤‡∏° TurnsRemaining ‡∏ô‡πâ‡∏≠‡∏¢‡πÑ‡∏õ‡∏°‡∏≤‡∏Å (‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏•‡∏î‡∏≠‡∏±‡∏ô‡πÉ‡∏Å‡∏•‡πâ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏Å‡πà‡∏≠‡∏ô)
			sort.SliceStable(tempEffects, func(i, j int) bool {
				isIShield := tempEffects[i].EffectID == 1102 // SHIELD
				isJShield := tempEffects[j].EffectID == 1102
				if isIShield && isJShield {
					return tempEffects[i].TurnsRemaining < tempEffects[j].TurnsRemaining
				}
				if isIShield {
					return true
				}
				if isJShield {
					return false
				}
				return i < j
			})

			// ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡πÄ‡∏ä‡πá‡∏Ñ Effect ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏≠‡∏±‡∏ô‡πÉ‡∏ô Slice ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
			for i := range tempEffects {
				if tempEffects[i].EffectID == 1102 && tempEffects[i].Value > 0 && remainingDamage > 0 {
					hasShieldEffect = true
					shieldHP := tempEffects[i].Value
					absorbedDamage := 0

					if remainingDamage >= shieldHP {
						absorbedDamage = shieldHP
						remainingDamage -= shieldHP
						tempEffects[i].Value = 0 // Shield ‡πÅ‡∏ï‡∏Å!
						s.appLogger.Info("Shield broke!", "target_id", target.ID, "shield_index", i, "absorbed", absorbedDamage)
					} else {
						absorbedDamage = remainingDamage
						tempEffects[i].Value -= remainingDamage
						remainingDamage = 0 // Damage ‡πÇ‡∏î‡∏ô‡∏î‡∏π‡∏î‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß
						s.appLogger.Info("Shield absorbed damage", "target_id", target.ID, "shield_index", i, "absorbed", absorbedDamage, "shield_hp_left", tempEffects[i].Value)
					}
					shieldAbsorbedTotal += absorbedDamage
				}
			} // ‡∏à‡∏ö Loop Shield

			// ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏≠‡∏≤ Shield ‡∏ó‡∏µ‡πà‡πÅ‡∏ï‡∏Å (Value <= 0) ‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ
			for _, effect := range tempEffects {
				if !(effect.EffectID == 1102 && effect.Value <= 0) {
					updatedEffects = append(updatedEffects, effect)
				} else {
					s.appLogger.Info("Removing broken shield from active effects", "target_id", target.ID, "effect_id", effect.EffectID)
				}
			}

			// Marshal list ‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô JSON ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
			newEffectsJSON, marshalErr := json.Marshal(updatedEffects)
			if marshalErr == nil {
				target.ActiveEffects = newEffectsJSON // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï ActiveEffects ‡∏Ç‡∏≠‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢
			} else {
				s.appLogger.Error("Failed to marshal updated active effects after shield processing", marshalErr, "target_id", target.ID)
			}

		} else { // ‡∏ñ‡πâ‡∏≤ Unmarshal ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
			s.appLogger.Error("Failed to unmarshal active effects for shield check", err, "target_id", target.ID)
			remainingDamage = damageDealt // ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ Shield
		}
	} else { // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ ActiveEffects ‡πÄ‡∏•‡∏¢
		remainingDamage = damageDealt // ‡∏Å‡πá‡πÑ‡∏°‡πà‡∏°‡∏µ Shield
	}
	// --- ‚≠êÔ∏è ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î Logic Shield ‚≠êÔ∏è ---

	// --- ‚≠êÔ∏è ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 7: ‡∏•‡∏î HP ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ (‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏∞‡∏•‡∏∏ Shield) ‚≠êÔ∏è ---
	hpBefore := target.CurrentHP // ‡πÄ‡∏Å‡πá‡∏ö HP ‡∏Å‡πà‡∏≠‡∏ô‡πÇ‡∏î‡∏ô Damage (‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏∞‡∏•‡∏∏ Shield)
	var hpDamageDealt int = 0    // ‡πÄ‡∏Å‡πá‡∏ö‡∏ß‡πà‡∏≤ HP ‡πÇ‡∏î‡∏ô‡∏•‡∏î‡πÑ‡∏õ‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏´‡∏£‡πà‡∏à‡∏£‡∏¥‡∏á‡πÜ
	if remainingDamage > 0 {     // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ Damage ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏´‡∏±‡∏Å Shield
		hpDamageDealt = remainingDamage
		target.CurrentHP -= remainingDamage
		if target.CurrentHP < 0 {
			target.CurrentHP = 0
		} // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏ï‡∏¥‡∏î‡∏•‡∏ö
	}
	hpAfter := target.CurrentHP // HP ‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢

	// --- ‚≠êÔ∏è ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 8: (‡πÉ‡∏´‡∏°‡πà!) Logic ‡πÄ‡∏ä‡πá‡∏Ñ Retaliation (ID 2203) ‡∏ö‡∏ô‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ ‚≠êÔ∏è ---
	// (‡∏™‡∏∞‡∏ó‡πâ‡∏≠‡∏ô Damage ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏≤ Caster)
	var targetActiveEffectsForRetaliation []domain.ActiveEffect
	retaliationDamage := 0 // Damage ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡∏∞‡∏ó‡πâ‡∏≠‡∏ô (Default = 0)
	hasRetaliationBuff := false

	// ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç: 1. ‡∏Å‡∏≤‡∏£‡πÇ‡∏à‡∏°‡∏ï‡∏µ‡∏ï‡πâ‡∏≠‡∏á "‡πÇ‡∏î‡∏ô" (‡πÇ‡∏î‡∏ô HP ‡∏´‡∏£‡∏∑‡∏≠ ‡πÇ‡∏î‡∏ô Shield)
	//          2. ‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Å‡∏≤‡∏£‡πÇ‡∏à‡∏°‡∏ï‡∏µ‡πÉ‡∏™‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
	//          3. ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ ActiveEffects
	if (hpDamageDealt > 0 || shieldAbsorbedTotal > 0) && (caster.ID != target.ID) && target.ActiveEffects != nil {
		// ‚≠êÔ∏è ‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÉ‡∏´‡∏°‡πà (targetActiveEffectsForRetaliation)
		err := json.Unmarshal(target.ActiveEffects, &targetActiveEffectsForRetaliation)
		if err == nil {
			for _, effect := range targetActiveEffectsForRetaliation {
				if effect.EffectID == 2203 && effect.Value > 0 { // BUFF_RETALIATION
					retaliationDamage = effect.Value // ‡∏î‡∏∂‡∏á Damage ‡∏™‡∏∞‡∏ó‡πâ‡∏≠‡∏ô‡∏°‡∏≤‡∏à‡∏≤‡∏Å Value
					hasRetaliationBuff = true
					s.appLogger.Info("Target has Retaliation buff", "target_id", target.ID, "retaliation_damage", retaliationDamage)
					break // ‡πÄ‡∏à‡∏≠‡∏≠‡∏±‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏û‡∏≠ (‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà Stack)
				}
			}
		} else {
			s.appLogger.Error("Failed to unmarshal active effects for Retaliation check", err, "target_id", target.ID)
		}
	}

	if hasRetaliationBuff && retaliationDamage > 0 {
		// ‡∏™‡∏∞‡∏ó‡πâ‡∏≠‡∏ô Damage ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏≤ Caster!
		casterHpBefore := caster.CurrentHP
		caster.CurrentHP -= retaliationDamage
		if caster.CurrentHP < 0 {
			caster.CurrentHP = 0
		} // ‡∏Å‡∏±‡∏ô Caster ‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏ï‡∏¥‡∏î‡∏•‡∏ö
		s.appLogger.Info("Applied Retaliation damage to caster", "caster_id", caster.ID, "damage_taken", retaliationDamage, "caster_hp_before", casterHpBefore, "caster_hp_after", caster.CurrentHP)
	}
	// --- ‚≠êÔ∏è ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î Logic Retaliation ‚≠êÔ∏è ---

	// --- ‚≠êÔ∏è ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 9: Log ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢ ‚≠êÔ∏è ---
	s.appLogger.Info("Applied DAMAGE effect",
		"caster", caster.ID,
		"target", target.ID,
		"initial_damage", damageDealt, // Damage ‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÑ‡∏î‡πâ‡∏ï‡∏≠‡∏ô‡πÅ‡∏£‡∏Å (‡∏£‡∏ß‡∏° Vulnerable ‡πÅ‡∏•‡πâ‡∏ß)
		"absorbed_by_shield", shieldAbsorbedTotal, // Damage ‡∏ó‡∏µ‡πà Shield ‡∏î‡∏π‡∏î‡∏ã‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
		"hp_damage", hpDamageDealt, // Damage ‡∏ó‡∏µ‡πà‡∏•‡∏á HP ‡∏à‡∏£‡∏¥‡∏á‡πÜ
		"target_hp_before", hpBefore, // HP ‡∏Å‡πà‡∏≠‡∏ô‡πÇ‡∏î‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏∞‡∏•‡∏∏ Shield
		"target_hp_after", hpAfter, // HP ‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
		"shield_active", hasShieldEffect, // ‡∏°‡∏µ Shield ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
	)
}

// --- ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç Heal ---
func (s *combatService) applyHeal(caster *domain.Combatant, target *domain.Combatant, effectData map[string]interface{}, spell *domain.Spell) {
	// --- ‚≠êÔ∏è ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Type Assertion ‚≠êÔ∏è ---
	effectIDFloat, ok1 := effectData["effect_id"].(float64)
	baseValueFloat, ok2 := effectData["value"].(float64)
	powerModifierFloat, ok3 := effectData["power_modifier"].(float64)
	if !ok1 || !ok2 {
		s.appLogger.Warn("Invalid or missing effect_id or value in effectData for applyHeal", effectData)
		return // ‡πÑ‡∏°‡πà Heal ‡∏ñ‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
	}
	if !ok3 {
		powerModifierFloat = 1.0 // ‚≠êÔ∏è ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ power_modifier ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤ Default 1.0 ‚≠êÔ∏è
	}
	// --- ‚≠êÔ∏è ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö ‚≠êÔ∏è ---
	tempSpellEffect := &domain.SpellEffect{
		EffectID:  uint(effectIDFloat),
		BaseValue: baseValueFloat,
	}
	powerModifier := powerModifierFloat // ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß
	// --- ‚≠êÔ∏è ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ä‡πá‡∏Ñ: Heal ‡∏Ñ‡∏ß‡∏£ scale ‡∏Å‡∏±‡∏ö powerModifier ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà? (‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ scale ‡πÑ‡∏õ‡∏Å‡πà‡∏≠‡∏ô) ‚≠êÔ∏è ---
	// ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏≤‡∏Å‡πÉ‡∏´‡πâ Heal ‡πÅ‡∏£‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡∏≤‡∏° Charge/Overcharge ‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á 1.0 ‡πÅ‡∏ó‡∏ô powerModifier ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
	s.appLogger.Info("Heal scaling with powerModifier", "modifier", powerModifier)
	// ------------------------------------------------------------------------------------

	// ‚≠êÔ∏è ‡∏™‡πà‡∏á powerModifier ‡πÉ‡∏´‡πâ calculateEffectValue! ‚≠êÔ∏è
	calculatedHeal, err := s.calculateEffectValue(caster, target, spell, tempSpellEffect, powerModifier)
	if err != nil {
		s.appLogger.Error("Error calculating heal value", err)
		return
	}

	healAmount := int(math.Round(calculatedHeal)) // ‚≠êÔ∏è ‡∏õ‡∏±‡∏î‡πÄ‡∏®‡∏© Heal ‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô int ‚≠êÔ∏è
	if healAmount < 0 {
		healAmount = 0
	} // Heal ‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡∏ï‡∏¥‡∏î‡∏•‡∏ö

	maxHP := s.getMaxHP(target)

	// ‚≠êÔ∏è ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö HP ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏° ‚≠êÔ∏è
	hpBefore := target.CurrentHP
	target.CurrentHP += healAmount
	if target.CurrentHP > maxHP {
		target.CurrentHP = maxHP
	}
	hpAfter := target.CurrentHP

	s.appLogger.Info("Applied HEAL_HP effect", "caster", caster.ID, "target", target.ID, "heal", healAmount, "target_hp_before", hpBefore, "target_hp_after", hpAfter)
}

// --- ‚≠êÔ∏è ‡πÄ‡∏û‡∏¥‡πà‡∏° ‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç Shield! ‚≠êÔ∏è ---
func (s *combatService) applyShield(caster *domain.Combatant, target *domain.Combatant, effectData map[string]interface{}, spell *domain.Spell) {
	// --- ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Type Assertion ---
	effectIDFloat, ok1 := effectData["effect_id"].(float64)
	baseValueFloat, ok2 := effectData["value"].(float64)
	durationFloat, ok3 := effectData["duration"].(float64) // ‚≠êÔ∏è 1. ‡∏≠‡πà‡∏≤‡∏ô Duration
	powerModifierFloat, ok4 := effectData["power_modifier"].(float64)

	if !ok1 || !ok2 {
		s.appLogger.Warn("Invalid or missing effect_id or value in effectData for applyShield", effectData)
		return
	}
	if !ok4 {
		powerModifierFloat = 1.0
	}
	// -----------------------------

	tempSpellEffect := &domain.SpellEffect{
		EffectID:  uint(effectIDFloat),
		BaseValue: baseValueFloat,
	}
	powerModifier := powerModifierFloat

	// --- ‚≠êÔ∏è 2. Logic ‡∏Å‡∏≤‡∏£‡∏´‡∏≤ Duration ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß (‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå) ‚≠êÔ∏è ---
	var shieldDuration int = 0
	if ok3 && durationFloat > 0 {
		shieldDuration = int(durationFloat)
		s.appLogger.Info("Using Shield's own duration from effectData", "duration", shieldDuration)
	}
	if shieldDuration == 0 {
		foundStanceDuration := false
		for _, effect := range spell.Effects {
			if effect.EffectID >= 3101 && effect.EffectID <= 3104 && effect.DurationInTurns > 0 { // STANCE_S/L/G/P
				shieldDuration = effect.DurationInTurns
				foundStanceDuration = true
				s.appLogger.Info("Using Stance duration for Shield", "stance_effect_id", effect.EffectID, "duration", shieldDuration)
				break
			}
		}
		if !foundStanceDuration {
			s.appLogger.Warn("No Stance effect found for Shield spell, attempting default", "spell_id", spell.ID)
		}
	}
	if shieldDuration == 0 {
		shieldDuration = 1
		s.appLogger.Warn("No duration found in effectData or Stance, defaulting duration", "spell_id", spell.ID, "default_duration", shieldDuration)
	}
	// --- ‚≠êÔ∏è ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î Logic Duration ‚≠êÔ∏è ---

	// --- ‚≠êÔ∏è Logic ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Shield HP (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°) ‚≠êÔ∏è ---
	calculatedShieldHP, err := s.calculateEffectValue(caster, target, spell, tempSpellEffect, powerModifier)
	if err != nil {
		s.appLogger.Error("Error calculating Shield HP value", err)
		calculatedShieldHP = tempSpellEffect.BaseValue * powerModifier // Fallback
	}
	shieldHP := int(math.Round(calculatedShieldHP))
	if shieldHP < 0 {
		shieldHP = 0
	}
	// --- ‚≠êÔ∏è ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î Logic Shield HP ‚≠êÔ∏è ---

	var activeEffects []domain.ActiveEffect
	if target.ActiveEffects != nil {
		err := json.Unmarshal(target.ActiveEffects, &activeEffects)
		if err != nil {
			s.appLogger.Error("Failed to unmarshal existing active effects for Shield buff", err, "target_id", target.ID)
			activeEffects = []domain.ActiveEffect{}
		}
	}

	// --- ‚≠êÔ∏è ‡∏ì‡∏±‡∏ä‡∏ä‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ 3: Logic "‡∏≠‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏±‡∏ö‡∏≠‡∏±‡∏ô‡πÄ‡∏Å‡πà‡∏≤" (Replace) ‚≠êÔ∏è ---
	var tempEffects []domain.ActiveEffect
	for _, effect := range activeEffects {
		if effect.EffectID != 1102 { // SHIELD - ‡πÄ‡∏Å‡πá‡∏ö Effect ‡∏≠‡∏∑‡πà‡∏ô‡πÜ
			tempEffects = append(tempEffects, effect)
		} else {
			s.appLogger.Info("Replacing existing Shield buff", "target_id", target.ID, "old_shield_value", effect.Value)
		}
	}
	activeEffects = tempEffects // ‡πÉ‡∏ä‡πâ list ‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏á Shield ‡∏≠‡∏±‡∏ô‡πÄ‡∏Å‡πà‡∏≤‡∏≠‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß
	// --- ‚≠êÔ∏è ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î Logic Replace ‚≠êÔ∏è ---

	// ‡∏™‡∏£‡πâ‡∏≤‡∏á Object Shield Effect ‡πÉ‡∏´‡∏°‡πà
	newEffect := domain.ActiveEffect{
		EffectID:       1102, // SHIELD
		Value:          shieldHP,
		TurnsRemaining: shieldDuration,
		SourceID:       caster.ID,
	}
	activeEffects = append(activeEffects, newEffect) // ‡πÄ‡∏û‡∏¥‡πà‡∏° Shield "‡∏≠‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà" ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ
	newEffectsJSON, _ := json.Marshal(activeEffects)
	target.ActiveEffects = newEffectsJSON

	s.appLogger.Info("Applied SHIELD effect", "target", target.ID, "shield_hp", shieldHP, "duration", shieldDuration)
}

// --- ‚≠êÔ∏è ‡πÄ‡∏û‡∏¥‡πà‡∏° ‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç MP Damage/Drain! ‚≠êÔ∏è ---
func (s *combatService) applyMpDamage(caster *domain.Combatant, target *domain.Combatant, effectData map[string]interface{}, spell *domain.Spell) {
	// --- ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Type Assertion ---
	effectIDFloat, ok1 := effectData["effect_id"].(float64)
	baseValueFloat, ok2 := effectData["value"].(float64)
	powerModifierFloat, ok3 := effectData["power_modifier"].(float64)
	if !ok1 || !ok2 {
		// ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô Error ‡πÄ‡∏õ‡πá‡∏ô Warn ‡πÅ‡∏•‡∏∞‡πÉ‡∏™‡πà effectData ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô Log
		s.appLogger.Warn("Invalid or missing effect_id or value in effectData for applyMpDamage", "data", effectData)
		return
	}
	if !ok3 {
		powerModifierFloat = 1.0
	}
	// -----------------------------

	tempSpellEffect := &domain.SpellEffect{
		EffectID:  uint(effectIDFloat),
		BaseValue: baseValueFloat,
	}
	powerModifier := powerModifierFloat

	// --- ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì MP Damage (Option 2: Scale ‡∏Å‡∏±‡∏ö Talent) ---
	calculatedMpDamage, err := s.calculateEffectValue(caster, target, spell, tempSpellEffect, powerModifier)
	if err != nil {
		s.appLogger.Error("Error calculating MP damage value, falling back to base calculation", err)
		calculatedMpDamage = tempSpellEffect.BaseValue * powerModifier // Fallback
	}
	// ----------------------------------------------------

	mpDamageDealt := int(math.Round(calculatedMpDamage)) // ‡∏õ‡∏±‡∏î‡πÄ‡∏®‡∏©
	if mpDamageDealt < 0 {
		mpDamageDealt = 0
	} // ‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡∏ï‡∏¥‡∏î‡∏•‡∏ö

	// --- ‡∏•‡∏î MP ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ ---
	mpBefore := target.CurrentMP
	actualMpLost := 0 // ‡πÄ‡∏Å‡πá‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏™‡∏µ‡∏¢ MP ‡πÑ‡∏õ‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏´‡∏£‡πà‡∏à‡∏£‡∏¥‡∏á‡πÜ

	// ‚≠êÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Logic ‡∏Å‡∏≤‡∏£‡∏•‡∏î MP ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‚≠êÔ∏è
	if target.CurrentMP >= mpDamageDealt {
		target.CurrentMP -= mpDamageDealt
		actualMpLost = mpDamageDealt // ‡πÄ‡∏™‡∏µ‡∏¢‡πÑ‡∏õ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÑ‡∏î‡πâ
	} else { // ‡∏ñ‡πâ‡∏≤ MP ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÑ‡∏°‡πà‡∏û‡∏≠‡πÉ‡∏´‡πâ‡∏•‡∏î
		actualMpLost = target.CurrentMP // ‡πÄ‡∏™‡∏µ‡∏¢‡πÑ‡∏õ‡πÄ‡∏ó‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ
		target.CurrentMP = 0
	}
	// --------------------------

	mpAfter := target.CurrentMP

	// --- ‚ú®‚≠êÔ∏è ‡πÄ‡∏û‡∏¥‡πà‡∏° Logic ‡∏Å‡∏≤‡∏£ Drain MP! ‚≠êÔ∏è‚ú® ---
	if uint(effectIDFloat) == 1104 { // MP_DAMAGE
		s.appLogger.Info("DEBUG: Entering MP Drain logic block", "actual_mp_lost", actualMpLost, "caster_current_mp", caster.CurrentMP) // ‚≠êÔ∏è Log 1 ‚≠êÔ∏è
		// ‚≠êÔ∏è TODO: ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏î (Drain Efficiency) ‡∏°‡∏≤‡∏à‡∏≤‡∏Å Game Config ‚≠êÔ∏è
		drainEfficiency := 0.5                                               // ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡∏î‡∏π‡∏î‡πÑ‡∏î‡πâ 50% ‡∏Ç‡∏≠‡∏á MP ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏™‡∏µ‡∏¢‡πÑ‡∏õ‡∏à‡∏£‡∏¥‡∏á
		mpGained := int(math.Round(float64(actualMpLost) * drainEfficiency)) // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì MP ‡∏ó‡∏µ‡πà Caster ‡∏à‡∏∞‡πÑ‡∏î‡πâ

		s.appLogger.Info("DEBUG: Calculated MP Gained", "mpGained", mpGained) // ‚≠êÔ∏è Log 2 ‚≠êÔ∏è

		if mpGained > 0 { // ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏î‡πâ MP ‡∏Ñ‡∏∑‡∏ô
			s.appLogger.Info("DEBUG: mpGained > 0, attempting to add MP to caster") // ‚≠êÔ∏è Log 3 ‚≠êÔ∏è
			casterMaxMP := s.getMaxMP(caster)                                       // ‡∏´‡∏≤ MaxMP ‡∏Ç‡∏≠‡∏á Caster
			casterMpBeforeDrain := caster.CurrentMP
			caster.CurrentMP += mpGained        // ‡πÄ‡∏û‡∏¥‡πà‡∏° MP ‡πÉ‡∏´‡πâ Caster
			if caster.CurrentMP > casterMaxMP { // ‡∏Å‡∏±‡∏ô MP ‡∏•‡πâ‡∏ô
				caster.CurrentMP = casterMaxMP
			}
			s.appLogger.Info("Caster drained MP", "caster", caster.ID, "gained", mpGained, "caster_mp_before", casterMpBeforeDrain, "caster_mp_after", caster.CurrentMP)
		} else {
			s.appLogger.Info("DEBUG: mpGained is not > 0", "mpGained", mpGained) // ‚≠êÔ∏è Log 4 (‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ú‡∏¥‡∏î) ‚≠êÔ∏è
		}
	} else {
		s.appLogger.Info("DEBUG: Condition if uint(effectIDFloat) == 1104 is FALSE", "effectIDFloat", effectIDFloat) // ‚≠êÔ∏è Log 5 (‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡πÄ‡∏ä‡πá‡∏Ñ ID ‡∏ú‡∏¥‡∏î) ‚≠êÔ∏è
	}
	// --- ‚ú®‚≠êÔ∏è ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î Logic Drain ‚≠êÔ∏è‚ú® ---

	// ‡∏õ‡∏£‡∏±‡∏ö Log ‡∏ô‡∏¥‡∏î‡∏´‡∏ô‡πà‡∏≠‡∏¢‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
	s.appLogger.Info("Applied MP_DAMAGE effect",
		"caster", caster.ID,
		"target", target.ID,
		"mp_damage_calculated", mpDamageDealt, // ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÑ‡∏î‡πâ
		"target_mp_lost", actualMpLost, // ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏™‡∏µ‡∏¢‡πÑ‡∏õ‡∏à‡∏£‡∏¥‡∏á
		"target_mp_before", mpBefore,
		"target_mp_after", mpAfter,
	)
}
