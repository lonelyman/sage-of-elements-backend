// file: internal/modules/combat/effect_manager.go
package combat

import (
	"encoding/json"
	"sage-of-elements-backend/internal/domain"
)

// ============================================================================
// üìå EFFECT MANAGER - CORE FUNCTIONS
// ============================================================================
// This file contains:
// - Effect tick processing (HP/MP Regen, DoT)
// - Effect expiry handling
// - Stat recalculation (Initiative, Defense, etc.)
// - Effect dispatcher (applyEffect - routes to specialist functions)
// - Helper functions (getMaxHP, getMaxMP)
//
// Specialist effect application functions are in separate files:
// - effect_direct.go   : Damage, Heal, Shield, MP Damage (1000s)
// - effect_buffs.go    : Buffs (2000s)
// - effect_debuffs.go  : Debuffs (4000s)
// - effect_synergy.go  : Stance effects (3000s)
// ============================================================================

func (s *combatService) processEffectTicksAndExpiry(combatant *domain.Combatant) {
	// 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ ActiveEffects ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
	if combatant.ActiveEffects == nil {
		s.appLogger.Debug("No active effects to process", "combatant_id", combatant.ID)
		return // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡πÉ‡∏´‡πâ‡∏ó‡∏≥ ‡∏≠‡∏≠‡∏Å‡πÄ‡∏•‡∏¢
	}

	// 2. ‡∏•‡∏≠‡∏á Unmarshal JSON ‡∏Ç‡∏≠‡∏á ActiveEffects
	var currentEffects []domain.ActiveEffect
	err := json.Unmarshal(combatant.ActiveEffects, &currentEffects)
	if err != nil || len(currentEffects) == 0 {
		if err != nil {
			s.appLogger.Error("Failed to unmarshal active effects in processEffectTicksAndExpiry", err, "combatant_id", combatant.ID, "raw_json", string(combatant.ActiveEffects))
		} else {
			s.appLogger.Debug("Active effects list is empty", "combatant_id", combatant.ID)
		}
		// ‡∏ñ‡πâ‡∏≤ JSON ‡πÄ‡∏™‡∏µ‡∏¢ ‡∏´‡∏£‡∏∑‡∏≠ List ‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤ ‡∏Å‡πá‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏ï‡πà‡∏≠
		// ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå combatant.ActiveEffects ‡∏ó‡∏¥‡πâ‡∏á‡∏ñ‡πâ‡∏≤ JSON ‡πÄ‡∏™‡∏µ‡∏¢?
		// combatant.ActiveEffects = nil // Optional: Clear invalid JSON
		return
	}

	// 3. ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ Max HP/MP ‡∏°‡∏≤‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÑ‡∏ß‡πâ
	maxHP := s.getMaxHP(combatant)
	maxMP := s.getMaxMP(combatant)

	// 4. ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° List ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö Effect ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏≠‡∏¢‡∏π‡πà
	var remainingEffects []domain.ActiveEffect
	somethingChanged := false // Flag ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà

	s.appLogger.Debug("Processing effect ticks and expiry", "combatant_id", combatant.ID, "effect_count_before", len(currentEffects))

	// 5. ‡∏ß‡∏ô‡∏•‡∏π‡∏õ Effect ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏≠‡∏±‡∏ô
	for _, effect := range currentEffects {
		currentEffect := effect // ‡∏™‡∏£‡πâ‡∏≤‡∏á copy ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏á‡∏≤‡∏ô ‡∏à‡∏∞‡πÑ‡∏î‡πâ‡πÑ‡∏°‡πà‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô loop ‡πÄ‡∏î‡∏¥‡∏°

		// --- 5.1 ‡∏ó‡∏≥ Effect ‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤ (Tick Effects) ---
		switch currentEffect.EffectID {
		case 2101: // BUFF_HP_REGEN
			healAmount := currentEffect.Value // ‡∏Ñ‡πà‡∏≤ Heal ‡∏ï‡πà‡∏≠‡πÄ‡∏ó‡∏¥‡∏£‡πå‡∏ô‡∏à‡∏≤‡∏Å Value ‡∏Ç‡∏≠‡∏á‡∏ö‡∏±‡∏ü
			if healAmount > 0 {               // ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Ñ‡πà‡∏≤ Heal
				newHP := combatant.CurrentHP + healAmount
				if newHP > maxHP {
					newHP = maxHP
				} // ‡∏Å‡∏±‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡πÄ‡∏Å‡∏¥‡∏ô
				if newHP != combatant.CurrentHP { // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡∏∞ Log ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
					combatant.CurrentHP = newHP
					s.appLogger.Info("Applied HP_REGEN tick", "combatant_id", combatant.ID, "heal", healAmount, "new_hp", combatant.CurrentHP)
					somethingChanged = true
				}
			}
		case 2102: // BUFF_MP_REGEN
			regenAmount := currentEffect.Value // ‡∏Ñ‡πà‡∏≤ Regen ‡∏ï‡πà‡∏≠‡πÄ‡∏ó‡∏¥‡∏£‡πå‡∏ô‡∏à‡∏≤‡∏Å Value ‡∏Ç‡∏≠‡∏á‡∏ö‡∏±‡∏ü
			if regenAmount > 0 {               // ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Ñ‡πà‡∏≤ Regen
				newMP := combatant.CurrentMP + regenAmount
				if newMP > maxMP {
					newMP = maxMP
				} // ‡∏Å‡∏±‡∏ô MP ‡πÄ‡∏Å‡∏¥‡∏ô
				if newMP != combatant.CurrentMP { // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡∏∞ Log ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
					combatant.CurrentMP = newMP
					s.appLogger.Info("Applied MP_REGEN tick", "combatant_id", combatant.ID, "regen", regenAmount, "new_mp", combatant.CurrentMP)
					somethingChanged = true
				}
			}
		case 4201: // DEBUFF_IGNITE
			dotAmount := currentEffect.Value // Damage ‡∏ï‡πà‡∏≠‡πÄ‡∏ó‡∏¥‡∏£‡πå‡∏ô‡∏à‡∏≤‡∏Å Value ‡∏Ç‡∏≠‡∏á‡∏î‡∏µ‡∏ö‡∏±‡∏ü
			if dotAmount > 0 {               // ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Ñ‡πà‡∏≤ Damage
				newHP := combatant.CurrentHP - dotAmount
				if newHP < 0 {
					newHP = 0
				} // ‡∏Å‡∏±‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏ï‡∏¥‡∏î‡∏•‡∏ö
				if newHP != combatant.CurrentHP { // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡∏∞ Log ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
					combatant.CurrentHP = newHP
					s.appLogger.Info("Applied IGNITE DoT tick", "combatant_id", combatant.ID, "damage", dotAmount, "new_hp", combatant.CurrentHP) // ‚≠êÔ∏è ‡πÅ‡∏Å‡πâ Log!
					somethingChanged = true
				}
			}
		}
		// --- ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î Tick Effects ---

		// --- 5.2 ‡∏•‡∏î Duration ‡πÅ‡∏•‡∏∞‡πÄ‡∏ä‡πá‡∏Ñ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ ---
		previousDuration := currentEffect.TurnsRemaining // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏ß‡πâ‡πÄ‡∏ä‡πá‡∏Ñ
		currentEffect.TurnsRemaining--                   // ‡∏•‡∏î‡πÄ‡∏ß‡∏•‡∏≤ 1 ‡πÄ‡∏ó‡∏¥‡∏£‡πå‡∏ô

		if currentEffect.TurnsRemaining > 0 {
			// ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ ‡πÄ‡∏Å‡πá‡∏ö Effect (‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤ Value ‡∏à‡∏≤‡∏Å Tick) ‡πÑ‡∏ß‡πâ‡πÉ‡∏ô List ‡πÉ‡∏´‡∏°‡πà
			remainingEffects = append(remainingEffects, currentEffect)
			// ‡∏ñ‡πâ‡∏≤ Duration ‡∏•‡∏î‡∏•‡∏á‡∏à‡∏£‡∏¥‡∏á ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
			if currentEffect.TurnsRemaining != previousDuration {
				somethingChanged = true
			}
		} else {
			// Effect ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß Log ‡∏ö‡∏≠‡∏Å ‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡πâ‡∏á Flag ‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
			s.appLogger.Info("Effect has expired", "combatant_id", combatant.ID, "effect_id", currentEffect.EffectID, "value_at_expiry", currentEffect.Value)
			somethingChanged = true
		}
		// --- ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡πÄ‡∏ä‡πá‡∏Ñ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ ---

	} // ‡∏à‡∏ö Loop for effect

	// 6. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï ActiveEffects ‡πÉ‡∏ô Combatant ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô
	if somethingChanged {
		newEffectsJSON, marshalErr := json.Marshal(remainingEffects)
		if marshalErr != nil {
			s.appLogger.Error("Failed to marshal remaining effects after processing", marshalErr, "combatant_id", combatant.ID)
			// ‡∏ñ‡πâ‡∏≤ Marshal ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏õ‡∏•‡πà‡∏≠‡∏¢ JSON ‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏ß‡πâ ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏ó‡∏¥‡πâ‡∏á? ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏õ‡∏•‡πà‡∏≠‡∏¢‡πÑ‡∏ß‡πâ‡∏Å‡πà‡∏≠‡∏ô
		} else {
			combatant.ActiveEffects = newEffectsJSON // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï JSON ‡πÉ‡∏´‡∏°‡πà
			s.appLogger.Info("Updated active effects after processing ticks/expiry", "combatant_id", combatant.ID, "remaining_count", len(remainingEffects))
		}
	} else {
		// ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏•‡∏¢ ‡∏Å‡πá‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£ ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á Marshal ‡πÉ‡∏´‡∏°‡πà
		s.appLogger.Debug("No changes to active effects after processing ticks/expiry", "combatant_id", combatant.ID)
	}
}

func (s *combatService) recalculateStats(combatant *domain.Combatant) {
	var baseInitiative int
	if combatant.CharacterID != nil && combatant.Character != nil { // ‚≠êÔ∏è ‡πÄ‡∏û‡∏¥‡πà‡∏° nil check
		baseInitiative = 50 + combatant.Character.TalentG
	} else if combatant.EnemyID != nil && combatant.Enemy != nil { // ‚≠êÔ∏è ‡πÄ‡∏û‡∏¥‡πà‡∏° nil check
		baseInitiative = combatant.Enemy.Initiative
	}

	var activeEffects []domain.ActiveEffect
	if combatant.ActiveEffects != nil {
		json.Unmarshal(combatant.ActiveEffects, &activeEffects)
	}
	modifiedInitiative := baseInitiative

	for _, effect := range activeEffects {
		if effect.EffectID == 4101 { // DEBUFF_SLOW
			modifiedInitiative += effect.Value
		}
	}
	combatant.Initiative = modifiedInitiative
	s.appLogger.Info("Stats recalculated for combatant", "id", combatant.ID, "base_init", baseInitiative, "modified_init", modifiedInitiative)
}

func (s *combatService) getMaxHP(combatant *domain.Combatant) int {
	if combatant.CharacterID != nil && combatant.Character != nil {
		// ‡πÄ‡∏£‡∏≤‡πÉ‡∏ä‡πâ current_hp ‡∏à‡∏≤‡∏Å character data ‡πÄ‡∏õ‡πá‡∏ô MaxHP (‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏ó‡∏≥‡πÉ‡∏ô turn_manager)
		return combatant.Character.CurrentHP
	} else if combatant.EnemyID != nil && combatant.Enemy != nil {
		return combatant.Enemy.MaxHP
	}
	s.appLogger.Warn("Could not determine MaxHP for combatant", "id", combatant.ID)
	return 0
}

// --- ‚≠êÔ∏è ‡πÄ‡∏û‡∏¥‡πà‡∏° Helper Function: getMaxMP ‚≠êÔ∏è ---
func (s *combatService) getMaxMP(combatant *domain.Combatant) int {
	if combatant.CharacterID != nil && combatant.Character != nil {
		// ‡πÄ‡∏£‡∏≤‡πÉ‡∏ä‡πâ current_mp ‡∏à‡∏≤‡∏Å character data ‡πÄ‡∏õ‡πá‡∏ô MaxMP (‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏ó‡∏≥‡πÉ‡∏ô turn_manager)
		return combatant.Character.CurrentMP
	} else if combatant.EnemyID != nil && combatant.Enemy != nil {
		// Enemy ‡∏ö‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏°‡∏µ MaxMP (‡∏ñ‡πâ‡∏≤‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡πÑ‡∏ß‡πâ) ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏¢‡∏≠‡∏∞‡πÜ
		// return combatant.Enemy.MaxMP // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ô‡∏µ‡πâ
		return 9999 // ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤ Default ‡πÑ‡∏õ‡∏Å‡πà‡∏≠‡∏ô
	}
	s.appLogger.Warn("Could not determine MaxMP for combatant", "id", combatant.ID)
	return 0
}

// ============================================================================
// üìå EFFECT DISPATCHER
// ============================================================================
// applyEffect - Routes effect application to specialist functions based on Effect ID
// This is the central hub that delegates work to specific effect handlers
// ============================================================================

func (s *combatService) applyEffect(caster *domain.Combatant, target *domain.Combatant, effectData map[string]interface{}, spell *domain.Spell) {
	effectID := uint(effectData["effect_id"].(float64))

	// Route to appropriate specialist based on new 1000-based ID structure
	switch effectID {
	// --- Direct Effects (1000s) ---
	case 1101: // DAMAGE
		s.applyDamage(caster, target, effectData, spell)
	case 1102: // SHIELD
		s.applyShield(caster, target, effectData, spell)
	case 1103: // HEAL
		s.applyHeal(caster, target, effectData, spell)
	case 1104: // MP_DAMAGE
		s.applyMpDamage(caster, target, effectData, spell)

	// --- Buffs (2000s) ---
	case 2101: // BUFF_HP_REGEN
		s.applyBuffHpRegen(caster, target, effectData)
	case 2102: // BUFF_MP_REGEN
		s.applyBuffMpRegen(caster, target, effectData)
	case 2201: // BUFF_EVASION
		s.applyBuffEvasion(caster, target, effectData)
	case 2202: // BUFF_DAMAGE_UP
		s.applyBuffDamageUp(caster, target, effectData)
	case 2203: // BUFF_RETALIATION
		s.applyBuffRetaliation(caster, target, effectData)
	case 2204: // BUFF_DEFENSE_UP
		s.applyBuffDefenseUp(caster, target, effectData)

	// --- Synergy Effects (3000s) ---
	case 3101: // STANCE_S
		s.applySynergyGrantStanceS(caster, target, effectData)
	case 3102: // STANCE_L
		s.applySynergyGrantStanceL(caster, target, effectData)
	case 3103: // STANCE_G
		s.applySynergyGrantStanceG(caster, target, effectData)
	case 3104: // STANCE_P
		s.applySynergyGrantStanceP(caster, target, effectData)

	// --- Debuffs (4000s) ---
	case 4101: // DEBUFF_SLOW
		s.applyDebuffSlow(caster, target, effectData)
	case 4102: // DEBUFF_VULNERABLE
		s.applyDebuffVulnerable(caster, target, effectData)
	case 4201: // DEBUFF_IGNITE
		s.applyDebuffIgnite(caster, target, effectData)

	default:
		s.appLogger.Warn("Attempted to apply an unknown or unimplemented effect", "effect_id", effectID)
	}
}
