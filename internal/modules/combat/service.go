// file: internal/modules/combat/service.go
package combat

import (
	"encoding/json"
	"fmt"
	"sage-of-elements-backend/internal/domain"
	"sage-of-elements-backend/internal/modules/character"
	"sage-of-elements-backend/internal/modules/deck"
	"sage-of-elements-backend/internal/modules/enemy"
	"sage-of-elements-backend/internal/modules/game_data"
	"sage-of-elements-backend/internal/modules/pve"
	"sage-of-elements-backend/pkg/apperrors"
	"sage-of-elements-backend/pkg/applogger"
	"strconv"

	"github.com/gofrs/uuid"
	"gorm.io/datatypes"
)

// --- Interface (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°) ---
type CombatService interface {
	CreateMatch(playerID uint, req CreateMatchRequest) (*domain.CombatMatch, error)
	PerformAction(playerID uint, matchID string, req PerformActionRequest) (*PerformActionResponse, error)
	ResolveSpell(elementID uint, masteryID uint, casterMainElementID uint) (*domain.Spell, error)

	// üßπ Cleanup Methods
	CleanupStaleMatches(inactiveMinutes int) (int64, error)             // ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î match ‡∏Ñ‡πâ‡∏≤‡∏á (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö cron job)
	AbortMatch(matchID string, reason string) error                     // Abort match ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö forfeit/disconnect)
	GetPlayerActiveMatch(characterID uint) (*domain.CombatMatch, error) // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡∏•‡πà‡∏≤
}

// --- Implementation ---
type combatService struct {
	appLogger     applogger.Logger
	combatRepo    CombatRepository
	characterRepo character.CharacterRepository
	enemyRepo     enemy.EnemyRepository
	pveRepo       pve.PveRepository
	gameDataRepo  game_data.GameDataRepository
	deckRepo      deck.DeckRepository
}

func NewCombatService(
	appLogger applogger.Logger,
	combatRepo CombatRepository,
	characterRepo character.CharacterRepository,
	enemyRepo enemy.EnemyRepository,
	pveRepo pve.PveRepository,
	gameDataRepo game_data.GameDataRepository,
	deckRepo deck.DeckRepository,
) CombatService {
	return &combatService{
		appLogger:     appLogger,
		combatRepo:    combatRepo,
		characterRepo: characterRepo,
		enemyRepo:     enemyRepo,
		pveRepo:       pveRepo,
		gameDataRepo:  gameDataRepo,
		deckRepo:      deckRepo,
	}
}

// CreateMatch ‡∏Ñ‡∏∑‡∏≠ Logic ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏ï‡πà‡∏≠‡∏™‡∏π‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö "‡πÇ‡∏´‡∏°‡∏î‡∏ù‡∏∂‡∏Å‡∏ã‡πâ‡∏≠‡∏°"
func (s *combatService) CreateMatch(playerID uint, req CreateMatchRequest) (*domain.CombatMatch, error) {
	// 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£
	playerChar, err := s.characterRepo.FindByID(req.CharacterID)
	if err != nil || playerChar == nil || playerChar.PlayerID != playerID {
		return nil, apperrors.PermissionDeniedError("character not found or you are not the owner")
	}

	// 2. ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏°‡∏µ active match ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡∏•‡πà‡∏≤
	activeMatch, err := s.combatRepo.FindPlayerActiveMatch(req.CharacterID)
	if err != nil {
		s.appLogger.Error("Failed to check active match", err,
			"character_id", req.CharacterID,
		)
		return nil, apperrors.SystemError("failed to check active match")
	}
	if activeMatch != nil {
		return nil, apperrors.New(409, "MATCH_ALREADY_ACTIVE",
			fmt.Sprintf("character already has an active match: %s", activeMatch.ID.String()))
	}

	// 3. ‡∏î‡∏∂‡∏á "‡∏Å‡∏é" ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Stat ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏°‡∏≤‡∏à‡∏≤‡∏Å Cache!
	hpBaseStr, _ := s.gameDataRepo.GetGameConfigValue("STAT_HP_BASE")
	hpPerTalentStr, _ := s.gameDataRepo.GetGameConfigValue("STAT_HP_PER_TALENT_S")
	initBaseStr, _ := s.gameDataRepo.GetGameConfigValue("STAT_INITIATIVE_BASE")
	initPerTalentStr, _ := s.gameDataRepo.GetGameConfigValue("STAT_INITIATIVE_PER_TALENT_G")

	hpBase, _ := strconv.Atoi(hpBaseStr)
	hpPerTalent, _ := strconv.Atoi(hpPerTalentStr)
	initBase, _ := strconv.Atoi(initBaseStr)
	initPerTalent, _ := strconv.Atoi(initPerTalentStr)

	// 4. ‡∏™‡∏£‡πâ‡∏≤‡∏á Combatant ‡∏Ç‡∏≠‡∏á "‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô" (‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ "‡∏Å‡∏é" ‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏°‡∏≤)
	playerCombatantID, _ := uuid.NewV7()
	playerCombatant := &domain.Combatant{
		ID:          playerCombatantID,
		CharacterID: &playerChar.ID,
		Initiative:  initBase + (playerChar.TalentG * initPerTalent),
		CurrentHP:   hpBase + (playerChar.TalentS * hpPerTalent),
		CurrentMP:   playerChar.CurrentMP,
		CurrentAP:   0,
	}

	// 5. "‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡∏•‡∏±‡∏á‡∏Å‡∏£‡∏∞‡∏™‡∏∏‡∏ô" T1
	var combatantDeck []*domain.CombatantDeck
	if req.DeckID != nil {
		deckID := *req.DeckID
		deckData, err := s.deckRepo.FindByID(deckID)
		if err != nil {
			return nil, apperrors.NotFoundError("selected deck not found")
		}
		if deckData.CharacterID != req.CharacterID {
			return nil, apperrors.PermissionDeniedError("selected deck does not belong to this character")
		}

		for _, slot := range deckData.Slots {
			newCharge := &domain.CombatantDeck{
				ID:          uuid.Must(uuid.NewV7()),
				CombatantID: playerCombatantID,
				ElementID:   slot.ElementID,
				IsConsumed:  false,
			}
			combatantDeck = append(combatantDeck, newCharge)
		}
	}
	playerCombatant.Deck = combatantDeck

	// 6. ‡∏™‡∏£‡πâ‡∏≤‡∏á Combatant ‡∏Ç‡∏≠‡∏á "‡∏®‡∏±‡∏ï‡∏£‡∏π" ‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏™‡∏π‡πâ
	var combatants []*domain.Combatant
	combatants = append(combatants, playerCombatant)

	switch req.MatchType {
	case "TRAINING":
		// ‡πÇ‡∏´‡∏°‡∏î‡∏ù‡∏∂‡∏Å‡∏ã‡πâ‡∏≠‡∏° - ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏®‡∏±‡∏ï‡∏£‡∏π‡πÄ‡∏≠‡∏á
		if len(req.TrainingEnemies) == 0 {
			return nil, apperrors.InvalidFormatError("training_enemies is required for TRAINING mode", nil)
		}

		for _, enemyInfo := range req.TrainingEnemies {
			enemyData, err := s.enemyRepo.FindByID(enemyInfo.EnemyID)
			if err != nil || enemyData == nil {
				return nil, apperrors.NotFoundError(fmt.Sprintf("enemy with id %d not found", enemyInfo.EnemyID))
			}

			enemyCombatantID, _ := uuid.NewV7()
			enemyCombatant := &domain.Combatant{
				ID:         enemyCombatantID,
				EnemyID:    &enemyData.ID,
				Initiative: enemyData.Initiative,
				CurrentHP:  enemyData.MaxHP,
				CurrentMP:  9999,
				CurrentAP:  0,
			}
			combatants = append(combatants, enemyCombatant)
		}

	case "STORY":
		// ‡πÇ‡∏´‡∏°‡∏î‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á - ‡πÇ‡∏´‡∏•‡∏î‡∏®‡∏±‡∏ï‡∏£‡∏π‡∏à‡∏≤‡∏Å‡∏î‡πà‡∏≤‡∏ô
		if req.StageID == nil {
			return nil, apperrors.InvalidFormatError("stage_id is required for STORY mode", nil)
		}

		// TODO: ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏° method ‡πÉ‡∏ô PveRepository ‡∏Å‡πà‡∏≠‡∏ô
		// stageData, err := s.pveRepo.FindStageByID(*req.StageID)
		// stageEnemies, err := s.pveRepo.FindStageEnemiesByStageID(*req.StageID)
		// for _, stageEnemy := range stageEnemies {
		//     enemyData, err := s.enemyRepo.FindByID(stageEnemy.EnemyID)
		//     enemyCombatantID, _ := uuid.NewV7()
		//     enemyCombatant := &domain.Combatant{
		//         ID:         enemyCombatantID,
		//         EnemyID:    &enemyData.ID,
		//         Initiative: enemyData.Initiative,
		//         CurrentHP:  enemyData.MaxHP,
		//         CurrentMP:  9999,
		//         CurrentAP:  0,
		//     }
		//     combatants = append(combatants, enemyCombatant)
		// }

		s.appLogger.Warn("STORY mode not fully implemented yet", "stage_id", *req.StageID)
		return nil, apperrors.New(501, "NOT_IMPLEMENTED", "STORY mode is not fully implemented yet")

	case "PVP":
		// PvP - ‡∏ï‡πà‡∏≠‡∏™‡∏π‡πâ‡∏Å‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏∑‡πà‡∏ô
		if req.OpponentID == nil {
			return nil, apperrors.InvalidFormatError("opponent_id is required for PVP mode", nil)
		}

		opponentChar, err := s.characterRepo.FindByID(*req.OpponentID)
		if err != nil || opponentChar == nil {
			return nil, apperrors.NotFoundError(fmt.Sprintf("opponent character with id %d not found", *req.OpponentID))
		}

		// ‡∏™‡∏£‡πâ‡∏≤‡∏á Combatant ‡∏Ç‡∏≠‡∏á‡∏ù‡πà‡∏≤‡∏¢‡∏ï‡∏£‡∏á‡∏Ç‡πâ‡∏≤‡∏°
		opponentCombatantID, _ := uuid.NewV7()
		opponentCombatant := &domain.Combatant{
			ID:          opponentCombatantID,
			CharacterID: &opponentChar.ID,
			Initiative:  initBase + (opponentChar.TalentG * initPerTalent),
			CurrentHP:   hpBase + (opponentChar.TalentS * hpPerTalent),
			CurrentMP:   opponentChar.CurrentMP,
			CurrentAP:   0,
		}

		// TODO: ‡πÇ‡∏´‡∏•‡∏î deck ‡∏Ç‡∏≠‡∏á‡∏ù‡πà‡∏≤‡∏¢‡∏ï‡∏£‡∏á‡∏Ç‡πâ‡∏≤‡∏°
		// if opponentChar.SelectedDeckID != nil { ... }

		combatants = append(combatants, opponentCombatant)

		s.appLogger.Info("PVP match created",
			"player_char_id", req.CharacterID,
			"opponent_char_id", *req.OpponentID,
		)

	default:
		return nil, apperrors.InvalidFormatError("unsupported match type", nil)
	}

	// 7. ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÄ‡∏ó‡∏¥‡∏£‡πå‡∏ô ‡πÅ‡∏•‡∏∞‡πÅ‡∏à‡∏Å AP ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
	apPerTurnStr, _ := s.gameDataRepo.GetGameConfigValue("COMBAT_AP_PER_TURN")
	apPerTurn, _ := strconv.Atoi(apPerTurnStr)
	var firstTurnCombatant *domain.Combatant = playerCombatant
	for _, c := range combatants {
		if c.Initiative > firstTurnCombatant.Initiative {
			firstTurnCombatant = c
		}
	}
	firstTurnCombatant.CurrentAP = apPerTurn
	s.appLogger.Info("Granting starting AP", "combatant_id", firstTurnCombatant.ID, "ap", firstTurnCombatant.CurrentAP)

	// 8. ‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏£‡πà‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏ï‡πà‡∏≠‡∏™‡∏π‡πâ
	var modifiersJSON datatypes.JSON
	if req.Modifiers != nil {
		jsonBytes, err := json.Marshal(req.Modifiers)
		if err != nil {
			return nil, apperrors.SystemError("failed to create match due to modifier issue")
		}
		modifiersJSON = jsonBytes
	}
	matchID, _ := uuid.NewV7()
	newMatch := &domain.CombatMatch{
		ID:          matchID,
		MatchType:   domain.MatchType(req.MatchType),
		StageID:     req.StageID,
		Status:      domain.MatchInProgress,
		Modifiers:   modifiersJSON,
		TurnNumber:  1,
		CurrentTurn: firstTurnCombatant.ID,
		Combatants:  combatants,
	}

	// 9. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á Database
	return s.combatRepo.CreateMatch(newMatch)
}

// PerformAction - ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏™‡∏π‡πâ
//
// üìã ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏° 6 ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏Å:
// ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
// ‚îÇ 1. [VALIDATION] ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Match                            ‚îÇ
// ‚îÇ    ‚Üì ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤ match ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á ‡πÅ‡∏•‡∏∞‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏à‡∏ö                       ‚îÇ
// ‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
// ‚îÇ 2. [AUTHORIZATION] ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÅ‡∏•‡∏∞‡πÄ‡∏ó‡∏¥‡∏£‡πå‡∏ô                       ‚îÇ
// ‚îÇ    ‚Üì ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡πÅ‡∏•‡∏∞‡∏ñ‡∏∂‡∏á‡πÄ‡∏ó‡∏¥‡∏£‡πå‡∏ô‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á   ‚îÇ
// ‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
// ‚îÇ 3. [ACTION EXECUTION] ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô                ‚îÇ
// ‚îÇ    ‚Üì ‡πÅ‡∏¢‡∏Å‡πÄ‡∏õ‡πá‡∏ô 2 ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó:                                          ‚îÇ
// ‚îÇ      ‚Ä¢ END_TURN: ‡∏à‡∏ö‡πÄ‡∏ó‡∏¥‡∏£‡πå‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏ó‡∏¥‡∏£‡πå‡∏ô‡πÉ‡∏´‡∏°‡πà                      ‚îÇ
// ‚îÇ      ‚Ä¢ CAST_SPELL: ‡∏£‡πà‡∏≤‡∏¢‡πÄ‡∏ß‡∏ó‡πÇ‡∏à‡∏°‡∏ï‡∏µ/‡∏ü‡∏∑‡πâ‡∏ô‡∏ü‡∏π                          ‚îÇ
// ‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
// ‚îÇ 4. [EARLY EXIT CHECK] ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏ö‡πÄ‡∏Å‡∏° (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ CAST_SPELL)          ‚îÇ
// ‚îÇ    ‚Üì ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ñ‡∏ô‡∏ï‡∏≤‡∏¢‡∏à‡∏ô‡πÄ‡∏Å‡∏°‡∏à‡∏ö ‚Üí ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡∏∞ return ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ                ‚îÇ
// ‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
// ‚îÇ 5. [AI PROCESSING] ‡πÉ‡∏´‡πâ AI ‡∏ó‡∏∏‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡πà‡∏ô‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á                   ‚îÇ
// ‚îÇ    ‚Üì ‡∏ß‡∏ô loop ‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ó‡∏¥‡∏£‡πå‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô                   ‚îÇ
// ‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
// ‚îÇ 6. [PERSISTENCE] ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô                         ‚îÇ
// ‚îÇ    ‚Üì UpdateMatch ‚Üí ‡∏™‡πà‡∏á response ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏≤ client                 ‚îÇ
// ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
//
// üîÑ Flow ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:
//
//	Player Cast Spell ‚Üí Enemy Dies ‚Üí Check End ‚Üí Game Over? Yes ‚Üí Return
//	Player Cast Spell ‚Üí Enemy Survives ‚Üí AI Turn 1 ‚Üí AI Turn 2 ‚Üí Back to Player ‚Üí Return
//	Player End Turn ‚Üí AI Turn 1 ‚Üí Check End ‚Üí AI Turn 2 ‚Üí Back to Player ‚Üí Return
func (s *combatService) PerformAction(playerID uint, matchID string, req PerformActionRequest) (*PerformActionResponse, error) {

	// ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
	// ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1: VALIDATION - ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Match
	// ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
	// ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏™‡∏π‡πâ‡∏à‡∏≤‡∏Å database ‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏¢‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏¢‡∏π‡πà
	// Input:   matchID (string) - UUID ‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏™‡∏π‡πâ
	// Output:  match (*domain.CombatMatch) - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏™‡∏π‡πâ‡∏û‡∏£‡πâ‡∏≠‡∏° combatants
	// Error:   - "match not found" ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ match ‡∏ô‡∏µ‡πâ‡πÉ‡∏ô DB
	//          - "MATCH_FINISHED" ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏°‡∏à‡∏ö‡πÅ‡∏•‡πâ‡∏ß (status != IN_PROGRESS)
	// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
	match, err := s.combatRepo.FindMatchByID(matchID)
	if err != nil {
		return nil, apperrors.NotFoundError("match not found")
	}
	if match.Status != domain.MatchInProgress {
		return nil, apperrors.New(400, "MATCH_FINISHED", "this match is already finished")
	}

	// ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
	// ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 2: AUTHORIZATION - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÅ‡∏•‡∏∞‡πÄ‡∏ó‡∏¥‡∏£‡πå‡∏ô
	// ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
	// ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà: ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ñ‡∏∂‡∏á‡πÄ‡∏ó‡∏¥‡∏£‡πå‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
	// Process:
	//   1. ‡∏´‡∏≤ combatant ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏à‡∏≤‡∏Å match.Combatants (CharacterID != nil)
	//   2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Character.PlayerID ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö playerID ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤
	//   3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ match.CurrentTurn ‡πÄ‡∏õ‡πá‡∏ô ID ‡∏Ç‡∏≠‡∏á playerCombatant
	// Error:   - "you are not part of this match" ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á character
	//          - "NOT_YOUR_TURN" ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏∂‡∏á‡πÄ‡∏ó‡∏¥‡∏£‡πå‡∏ô
	// Note:    ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£ cheat ‡πÇ‡∏î‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á request ‡πÅ‡∏ó‡∏ô‡∏Ñ‡∏ô‡∏≠‡∏∑‡πà‡∏ô
	// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
	playerCombatant := s.findPlayerCombatant(match)
	if playerCombatant == nil || playerCombatant.Character.PlayerID != playerID {
		return nil, apperrors.PermissionDeniedError("you are not part of this match")
	}
	if match.CurrentTurn != playerCombatant.ID {
		return nil, apperrors.New(400, "NOT_YOUR_TURN", "it's not your turn")
	}

	// ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
	// ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 3: ACTION EXECUTION - ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
	// ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
	// ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà: ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• action ‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (switch-case ‡∏ï‡∏≤‡∏° ActionType)
	//
	// Note: UpdatedAt ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÇ‡∏î‡∏¢ GORM ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏Å UpdateMatch()
	//       ‡πÉ‡∏ä‡πâ UpdatedAt ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö match ‡∏Ñ‡πâ‡∏≤‡∏á (stale detection)
	//
	// 3.1) ActionType = "END_TURN"
	//      ‚îú‚îÄ endTurn(): ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå AP ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô, ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô CurrentTurn ‡πÑ‡∏õ‡∏Ñ‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
	//      ‚îî‚îÄ startNewTurn(): ‡πÅ‡∏à‡∏Å AP ‡πÉ‡∏´‡∏°‡πà, ‡∏•‡∏î duration ‡∏Ç‡∏≠‡∏á effects, regen resources
	//
	// 3.2) ActionType = "CAST_SPELL"
	//      ‚îú‚îÄ executeCastSpellV2(): ‡∏£‡πà‡∏≤‡∏¢‡πÄ‡∏ß‡∏ó (‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö MP/AP, ‡∏´‡∏≤ target, ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏î‡∏≤‡πÄ‡∏°‡∏à, apply effects)
	//      ‚îú‚îÄ checkMatchEndCondition(): ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏ó‡∏µ‡∏°‡πÑ‡∏´‡∏ô‡∏ï‡∏≤‡∏¢‡∏´‡∏°‡∏î‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
	//      ‚îî‚îÄ [EARLY EXIT] ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏°‡∏à‡∏ö ‚Üí UpdateMatch ‚Üí return ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏´‡πâ AI ‡πÄ‡∏•‡πà‡∏ô‡∏ï‡πà‡∏≠)
	//
	// Output:  match ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß (CurrentTurn, TurnNumber, Combatants stats)
	// Error:   - actionErr ‡∏à‡∏≤‡∏Å spell casting (‡πÑ‡∏°‡πà‡∏û‡∏≠ MP, target ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á, etc.)
	//          - "unsupported action type" ‡∏ñ‡πâ‡∏≤‡∏™‡πà‡∏á action ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å
	// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
	var actionErr error
	switch req.ActionType {

	case "END_TURN":
		// ‡∏à‡∏ö‡πÄ‡∏ó‡∏¥‡∏£‡πå‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏ó‡∏¥‡∏£‡πå‡∏ô‡πÉ‡∏´‡∏°‡πà
		s.appLogger.Info("Player ended their turn.", "match_id", matchID)
		match = s.endTurn(match)                 // ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô CurrentTurn ‡πÑ‡∏õ‡∏Ñ‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
		match, actionErr = s.startNewTurn(match) // ‡πÅ‡∏à‡∏Å AP, ‡∏•‡∏î effect duration, regen

	case "CAST_SPELL":
		// ‡∏£‡πà‡∏≤‡∏¢‡πÄ‡∏ß‡∏ó‡πÇ‡∏à‡∏°‡∏ï‡∏µ‡∏´‡∏£‡∏∑‡∏≠‡∏ü‡∏∑‡πâ‡∏ô‡∏ü‡∏π
		actionErr = s.executeCastSpellV2(playerCombatant, match, req)

		// ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏ö‡πÄ‡∏Å‡∏°‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á‡∏£‡πà‡∏≤‡∏¢‡πÄ‡∏ß‡∏ó (‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏Ñ‡∏ô‡∏ï‡∏≤‡∏¢‡∏à‡∏ô‡πÄ‡∏Å‡∏°‡∏à‡∏ö)
		match = s.checkMatchEndCondition(match)
		if match.Status != domain.MatchInProgress {
			// ‡πÄ‡∏Å‡∏°‡∏à‡∏ö‡πÅ‡∏•‡πâ‡∏ß (PLAYER_WIN ‡∏´‡∏£‡∏∑‡∏≠ PLAYER_LOSE)
			// ‚Üí ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡∏∞ return ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ (‡∏Ç‡πâ‡∏≤‡∏°‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô AI ‡πÅ‡∏•‡∏∞ final save)
			updatedMatch, err := s.combatRepo.UpdateMatch(match)
			if err != nil {
				return nil, err
			}
			return &PerformActionResponse{
				UpdatedMatch:    updatedMatch,
				PerformedAction: req,
			}, nil
		}

	default:
		return nil, apperrors.InvalidFormatError("unsupported action type", nil)
	}

	// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö error ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ó‡∏≥ action
	if actionErr != nil {
		return nil, actionErr
	}

	// ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
	// ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 4: AI PROCESSING - ‡πÉ‡∏´‡πâ AI ‡∏ó‡∏∏‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡πà‡∏ô‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á
	// ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
	// ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà: ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÄ‡∏ó‡∏¥‡∏£‡πå‡∏ô‡∏Ç‡∏≠‡∏á AI ‡∏ó‡∏∏‡∏Å‡∏ï‡∏±‡∏ß‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ó‡∏¥‡∏£‡πå‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
	// Process:
	//   1. Loop ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö match.CurrentTurn
	//   2. ‡∏ñ‡πâ‡∏≤ CurrentTurn.EnemyID != nil ‚Üí ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å processAITurn() ‚Üí ‡∏´‡∏°‡∏∏‡∏ô‡πÄ‡∏ó‡∏¥‡∏£‡πå‡∏ô
	//   3. ‡∏ñ‡πâ‡∏≤ CurrentTurn.CharacterID != nil ‚Üí ‡∏´‡∏¢‡∏∏‡∏î loop (‡πÄ‡∏ó‡∏¥‡∏£‡πå‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô)
	//   4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏ö‡πÄ‡∏Å‡∏°‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å AI ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à
	//   5. Safety: ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 20 ‡πÄ‡∏ó‡∏¥‡∏£‡πå‡∏ô‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á (‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô infinite loop)
	//
	// ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á Flow:
	//   - Match ‡∏°‡∏µ 3 combatants: [Player, Enemy1, Enemy2]
	//   - Player ‡∏Å‡∏î END_TURN ‚Üí CurrentTurn = Enemy1
	//   - processAllAITurns():
	//     ‚Ä¢ Enemy1 ‡πÄ‡∏•‡πà‡∏ô ‚Üí ‡∏´‡∏°‡∏∏‡∏ô‡πÄ‡∏ó‡∏¥‡∏£‡πå‡∏ô ‚Üí CurrentTurn = Enemy2
	//     ‚Ä¢ Enemy2 ‡πÄ‡∏•‡πà‡∏ô ‚Üí ‡∏´‡∏°‡∏∏‡∏ô‡πÄ‡∏ó‡∏¥‡∏£‡πå‡∏ô ‚Üí CurrentTurn = Player
	//     ‚Ä¢ ‡πÄ‡∏à‡∏≠ Player ‚Üí ‡∏´‡∏¢‡∏∏‡∏î loop
	//
	// Output:  match ‡∏ó‡∏µ‡πà AI ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß (CurrentTurn ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏Å‡∏°‡∏à‡∏ö)
	// Error:   error ‡∏à‡∏≤‡∏Å AI turn processing (spell casting, resource issue)
	// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
	match, err = s.processAllAITurns(match)
	if err != nil {
		return nil, err
	}

	// ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
	// ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 5: PERSISTENCE - ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô
	// ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
	// ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà: ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á match ‡∏•‡∏á database ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏≤ client
	// Process:
	//   1. UpdateMatch() ‚Üí ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å match, combatants, effects ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
	//   2. ‡∏™‡∏£‡πâ‡∏≤‡∏á PerformActionResponse ‡∏ó‡∏µ‡πà‡∏°‡∏µ:
	//      - UpdatedMatch: match ‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß (‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• AI turns)
	//      - PerformedAction: request ‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏™‡πà‡∏á‡∏°‡∏≤ (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ client ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö)
	//   3. Return response ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
	//
	// Output:  PerformActionResponse - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏™‡∏π‡πâ‡∏´‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à
	// Error:   error ‡∏à‡∏≤‡∏Å database (connection, constraint violation, etc.)
	// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
	updatedMatch, err := s.combatRepo.UpdateMatch(match)
	if err != nil {
		return nil, err
	}
	return &PerformActionResponse{
		UpdatedMatch:    updatedMatch,
		PerformedAction: req,
	}, nil
}

// ==================== Spell Casting (New Refactored Version) ====================

// executeCastSpellV2 ‡πÄ‡∏õ‡πá‡∏ô wrapper ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡πà‡∏≤‡∏¢‡πÄ‡∏ß‡∏ó‡πÉ‡∏´‡∏°‡πà
// ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà executeCastSpell ‡πÄ‡∏î‡∏¥‡∏° (‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ñ‡∏π‡∏Å deprecate)
func (s *combatService) executeCastSpellV2(
	caster *domain.Combatant,
	match *domain.CombatMatch,
	req PerformActionRequest,
) error {
	// Validate request
	if req.SpellID == nil || req.TargetID == nil {
		return apperrors.InvalidFormatError("spell_id and target_id are required", nil)
	}

	spellID := *req.SpellID
	targetUUIDStr := *req.TargetID

	// Parse target UUID
	targetUUID, err := uuid.FromString(targetUUIDStr)
	if err != nil {
		return apperrors.InvalidFormatError("invalid target_id format", nil)
	}

	// Get casting mode (default to INSTANT)
	castingMode := "INSTANT"
	if req.CastMode != "" {
		castingMode = req.CastMode
	}

	// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà
	return s.ExecuteSpellCast(match, caster, targetUUID, spellID, castingMode)
}

// ==================== Cleanup & Management ====================

// CleanupStaleMatches ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î match ‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏≤‡∏á‡πÄ‡∏Å‡∏¥‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≥‡∏´‡∏ô‡∏î
// ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏à‡∏≤‡∏Å Cron Job ‡∏ó‡∏∏‡∏Å 5-10 ‡∏ô‡∏≤‡∏ó‡∏µ
func (s *combatService) CleanupStaleMatches(inactiveMinutes int) (int64, error) {
	s.appLogger.Info("üßπ Starting stale match cleanup",
		"inactive_minutes", inactiveMinutes,
	)

	affectedRows, err := s.combatRepo.AbortStaleMatches(inactiveMinutes)
	if err != nil {
		s.appLogger.Error("Failed to cleanup stale matches", err)
		return 0, err
	}

	if affectedRows > 0 {
		s.appLogger.Warn("Aborted stale matches",
			"count", affectedRows,
			"inactive_minutes", inactiveMinutes,
		)
	} else {
		s.appLogger.Debug("No stale matches found")
	}

	return affectedRows, nil
}

// AbortMatch ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å match ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ ID (‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô forfeit/disconnect)
func (s *combatService) AbortMatch(matchID string, reason string) error {
	s.appLogger.Info("Aborting match",
		"match_id", matchID,
		"reason", reason,
	)

	match, err := s.combatRepo.AbortMatchByID(matchID, reason)
	if err != nil {
		s.appLogger.Error("Failed to abort match", err,
			"match_id", matchID,
		)
		return err
	}

	if match.Status == domain.MatchAborted {
		s.appLogger.Info("Match aborted successfully",
			"match_id", matchID,
			"status", match.Status,
		)
	}

	return nil
}

// GetPlayerActiveMatch ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏°‡∏µ match ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
// ‡πÉ‡∏ä‡πâ‡∏Å‡πà‡∏≠‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á match ‡πÉ‡∏´‡∏°‡πà ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏•‡∏≤‡∏¢‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
func (s *combatService) GetPlayerActiveMatch(characterID uint) (*domain.CombatMatch, error) {
	return s.combatRepo.FindPlayerActiveMatch(characterID)
}
