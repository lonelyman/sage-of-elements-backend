// file: internal/modules/combat/spell_cast_executor.go
package combat

import (
	"sage-of-elements-backend/internal/domain"

	"github.com/gofrs/uuid"
)

// ExecuteSpellCast ‡πÄ‡∏õ‡πá‡∏ô Main Entry Point ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡πà‡∏≤‡∏¢‡πÄ‡∏ß‡∏ó
// ‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö orchestrate ‡∏ó‡∏±‡πâ‡∏á‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡πà‡∏≤‡∏¢‡πÄ‡∏ß‡∏ó‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡∏ï‡πâ‡∏ô‡∏à‡∏ô‡∏à‡∏ö
//
// Flow:
// 1. PrepareAndValidateCast ‚Üí ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö + ‡∏´‡∏±‡∏Å‡∏ó‡∏£‡∏±‡∏û‡∏¢‡∏≤‡∏Å‡∏£
// 2. CalculateInitialEffectValues ‚Üí ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
// 3. CalculateCombinedModifiers ‚Üí ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì modifier
// 4. ApplyCalculatedEffects ‚Üí ‡∏õ‡∏£‡∏∞‡∏¢‡∏∏‡∏Å‡∏ï‡πå effect
// 5. SaveCombatState ‚Üí ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ (auto-saved ‡πÉ‡∏ô match update)
func (s *combatService) ExecuteSpellCast(
	match *domain.CombatMatch,
	caster *domain.Combatant,
	targetID uuid.UUID,
	spellID uint,
	castingMode string,
) error {

	s.appLogger.Info("üöÄ BEGIN: ExecuteSpellCast",
		"match_id", match.ID,
		"caster_id", caster.ID,
		"target_id", targetID,
		"spell_id", spellID,
		"casting_mode", castingMode,
	)

	// ==================== STEP 1: Preparation ====================
	prepResult, err := s.PrepareAndValidateCast(match, caster, targetID, spellID, castingMode)
	if err != nil {
		s.appLogger.Error("STEP 1 failed: Preparation error", err)
		return err
	}

	// ==================== STEP 2: Calculate Initial Values ====================
	initialValues, err := s.CalculateInitialEffectValues(prepResult.Spell, prepResult.Caster)
	if err != nil {
		s.appLogger.Error("STEP 2 failed: Initial value calculation error", err)
		return err
	}

	// ==================== STEP 3: Calculate Modifiers ====================
	// NOTE: ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì modifier ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏∏‡∏Å effect (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß)
	// ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ effect ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ modifier ‡πÅ‡∏¢‡∏Å ‡πÉ‡∏´‡πâ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏ô Step 4
	modifierCtx, err := s.CalculateCombinedModifiers(
		prepResult.Caster,
		prepResult.Target,
		prepResult.Spell,
		prepResult.PowerModifier,
		0, // effect ID 0 = ‡πÉ‡∏ä‡πâ modifier ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
	)
	if err != nil {
		s.appLogger.Error("STEP 3 failed: Modifier calculation error", err)
		return err
	}

	// ==================== STEP 4: Apply Effects ====================
	applicationResult, err := s.ApplyCalculatedEffects(
		prepResult.Caster,
		prepResult.Target,
		prepResult.Spell,
		initialValues,
		modifierCtx,
	)
	if err != nil {
		s.appLogger.Error("STEP 4 failed: Effect application error", err)
		return err
	}

	// Log summary
	if len(applicationResult.Errors) > 0 {
		s.appLogger.Warn("Some effects failed to apply",
			"error_count", len(applicationResult.Errors),
			"errors", applicationResult.Errors,
		)
	}

	// ==================== STEP 5: Save State ====================
	// NOTE: State ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÇ‡∏î‡∏¢ PerformAction ‡πÄ‡∏°‡∏∑‡πà‡∏≠ return
	// ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á save ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà

	s.appLogger.Info("‚úÖ SUCCESS: ExecuteSpellCast completed",
		"spell_name", prepResult.Spell.Name,
		"effects_applied", applicationResult.EffectsApplied,
		"total_damage", applicationResult.TotalDamage,
		"total_healing", applicationResult.TotalHealing,
		"evaded", applicationResult.EffectsEvaded,
	)

	return nil
}
